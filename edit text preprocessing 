{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "AMLS II",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNrWQ2IsPTbwZhelOCDSdPH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/donyeun/AMLSII_19-20_SN18154195/blob/master/edit%20text%20preprocessing%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Skg_yPYJE3V_",
        "colab_type": "text"
      },
      "source": [
        "## Mount Google Drive"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oTTXAniWmfMi",
        "colab_type": "code",
        "outputId": "0faee023-7c9e-4d89-ec1e-a306202751c2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pe4VG6osyCiF",
        "colab_type": "text"
      },
      "source": [
        "# Libraries and Variables"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_5LCvzjssSJf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 292
        },
        "outputId": "75d25606-756a-4263-dc7b-18d5c87eb72c"
      },
      "source": [
        "import pandas as pd\n",
        "import os\n",
        "import torch\n",
        "from tqdm import tqdm\n",
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt\n",
        "import nltk\n",
        "import csv\n",
        "\n",
        "!pip install ekphrasis\n"
      ],
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: ekphrasis in /usr/local/lib/python3.6/dist-packages (0.5.1)\n",
            "Requirement already satisfied: ujson in /usr/local/lib/python3.6/dist-packages (from ekphrasis) (2.0.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (from ekphrasis) (3.2.1)\n",
            "Requirement already satisfied: termcolor in /usr/local/lib/python3.6/dist-packages (from ekphrasis) (1.1.0)\n",
            "Requirement already satisfied: nltk in /usr/local/lib/python3.6/dist-packages (from ekphrasis) (3.2.5)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from ekphrasis) (4.38.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from ekphrasis) (1.18.2)\n",
            "Requirement already satisfied: colorama in /usr/local/lib/python3.6/dist-packages (from ekphrasis) (0.4.3)\n",
            "Requirement already satisfied: ftfy in /usr/local/lib/python3.6/dist-packages (from ekphrasis) (5.7)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->ekphrasis) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib->ekphrasis) (0.10.0)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->ekphrasis) (2.8.1)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->ekphrasis) (2.4.7)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from nltk->ekphrasis) (1.12.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.6/dist-packages (from ftfy->ekphrasis) (0.1.9)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_HZ83t_QZq1f",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "cfg = {\n",
        "       'paths': {\n",
        "           'train_folder_task_a': '/content/drive/My Drive/public/AMLSII_19-20_SN18154195/dataset/training/2017_English_final/GOLD/Subtask_A',\n",
        "           'train_additional_dataset_filenames': ['livejournal-2014test-A.tsv', 'sms-2013test-A.tsv'],\n",
        "           'test_file_task_a': '/content/drive/My Drive/public/AMLSII_19-20_SN18154195/dataset/testing/SemEval2017-task4-test/SemEval2017-task4-test.subtask-A.english.txt',\n",
        "\n",
        "           'train_folder_task_b': '/content/drive/My Drive/public/AMLSII_19-20_SN18154195/dataset/training/2017_English_final/GOLD/Subtasks_BD',\n",
        "           'test_file_task_b': '/content/drive/My Drive/public/AMLSII_19-20_SN18154195/dataset/testing/SemEval2017-task4-test/SemEval2017-task4-test.subtask-BD.english.txt',\n",
        "       },\n",
        "       'task_a': {\n",
        "           'use_additional_dataset': False,\n",
        "           'dataset': {\n",
        "               'clean' : {\n",
        "                   'training_filepath': '/content/drive/My Drive/public/AMLSII_19-20_SN18154195/dataset/clean/task_a_training.csv'\n",
        "               }\n",
        "           }\n",
        "       },\n",
        "       'preprocessing': {\n",
        "           'tokenization': {\n",
        "               'remove_twitter_handle': True,\n",
        "               'preserve_case': False\n",
        "           }\n",
        "       },\n",
        "}"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6kMuU80j7WrQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "3c9042ab-3381-4ba2-b1ce-8cd3178fa0fb"
      },
      "source": [
        "import tensorboard as tb\n",
        "import tensorflow as tf\n",
        "tf.io.gfile = tb.compat.tensorflow_stub.io.gfile\n",
        "\n",
        "# Load the TensorBoard notebook extension\n",
        "%load_ext tensorboard"
      ],
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The tensorboard extension is already loaded. To reload it, use:\n",
            "  %reload_ext tensorboard\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RuEK2LfkrPYV",
        "colab_type": "text"
      },
      "source": [
        "# Load Dataset and Data Preprocessing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6EVaQRfoFLyT",
        "colab_type": "text"
      },
      "source": [
        "## Preprocess Additional Dataset\n",
        "In task A, there are some additional datasets that were given from the competition apart from the standard twitter corpus, which is sms and livejournal corpus. We can use both of these additional datasets, after we preprocess the formatting so that it matches the rest of the twitter datasets."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RUAJontBFp21",
        "colab_type": "code",
        "outputId": "d951f08d-4848-4410-c0d0-b5d8f4d2f3fb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 493
        }
      },
      "source": [
        "task_a_train_additional_dfs = {}\n",
        "\n",
        "for filename in cfg['paths']['train_additional_dataset_filenames']:\n",
        "  # read additional corpora\n",
        "  task_a_train_additional_dfs[filename] = pd.read_csv(os.path.join(cfg['paths']['train_folder_task_a'], filename), sep='\\t', header=None, quoting=csv.QUOTE_NONE)\n",
        "  \n",
        "  if filename == 'livejournal-2014test-A.tsv':\n",
        "    # remove the 0-th column from livejournal corpora, as it is unnecessary\n",
        "    task_a_train_additional_dfs[filename] = task_a_train_additional_dfs[filename].drop(columns=[0])\n",
        "  elif filename == 'sms-2013test-A.tsv':\n",
        "    # remove the 1st column from sms corpora, as it is unnecessary\n",
        "    task_a_train_additional_dfs[filename] = task_a_train_additional_dfs[filename].drop(columns=[1])\n",
        "  \n",
        "  # reset the column index to make it incremental\n",
        "  task_a_train_additional_dfs[filename].columns = range(task_a_train_additional_dfs[filename].shape[1])\n",
        "  \n",
        "  print(task_a_train_additional_dfs[filename])"
      ],
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "             0         1                                                  2\n",
            "0     LJ111111  negative  I know I missed something here , but what does...\n",
            "1     LJ111113   neutral  What do you think of Beside Ourselves as a tit...\n",
            "2     LJ111114  positive                    :D I intend to be one someday .\n",
            "3     LJ111117  negative  LLLINKKK LLLINKKK IIIMAGEEELLLINKKK The choice...\n",
            "4     LJ111119   neutral                     LLLINKKK Some more mountains .\n",
            "...        ...       ...                                                ...\n",
            "1137  LJ113616  positive                     Maybe it was - his - fantasy ?\n",
            "1138  LJ113618  negative  It was ok , but they always just seem so nervo...\n",
            "1139  LJ113621  positive  It is streamable from YepRoc -- matter of fact...\n",
            "1140  LJ113623  positive  comment telling me who you are , or how you fo...\n",
            "1141  LJ113625   neutral  im on myspace ... ill try and find you and add...\n",
            "\n",
            "[1142 rows x 3 columns]\n",
            "          0         1                                                  2\n",
            "0     10936   neutral  Yes i am going from school have class till 5 c...\n",
            "1     11051   neutral  can u tape the match for me?  i\\u2019ll rush o...\n",
            "2     10966   neutral  Too many people at my house my relatives are h...\n",
            "3     11211  negative  Yea I have spoken to him liao. Indeed he is up...\n",
            "4     11350  positive  Haha... I want to see. E macdonalds here cheap...\n",
            "...     ...       ...                                                ...\n",
            "2089  10038  negative  Oki... Think i\\u2019m confused... I only know ...\n",
            "2090  11799   neutral  Yup... Ok i go home look at the timings then i...\n",
            "2091  11945   neutral            Here got lots of hair dresser fr china.\n",
            "2092  10154   neutral  no alh  we are not discussing fromt he viewpoi...\n",
            "2093  11428   neutral  Not dat i dun wan sign up but i wan only for a...\n",
            "\n",
            "[2094 rows x 3 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FH283206E6BF",
        "colab_type": "text"
      },
      "source": [
        "## Make Datasets As Pandas' DataFrames and Cleaning Dataset\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LgC4YYhHrtdb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def append_txt_files_as_one_dataframe(folderpath, filename_keywords_list, additional_dataset_dfs=None):\n",
        "  dataset_per_file_dfs = {}\n",
        "  dataset_df = pd.DataFrame()\n",
        "  filenames = os.listdir(folderpath)\n",
        "  \n",
        "  # open txt files (in tsv formatting)\n",
        "  for filename in filenames:\n",
        "    # if the filename contains a keyword in the filename_keywords_list, then open the txt file\n",
        "    # this is to avoid opening unnecessary txt such as readme.txt file.\n",
        "    if any(keyword in filename for keyword in filename_keywords_list):\n",
        "      dataset_per_file_dfs[filename] = pd.read_csv(os.path.join(folderpath, filename), sep=\"\\t\", header=None, quoting=csv.QUOTE_NONE)\n",
        "      print(dataset_per_file_dfs[filename].shape, filename)\n",
        "\n",
        "  # combine the original dataset with additional dataset (if any)\n",
        "  if additional_dataset_dfs is not None:\n",
        "    for key, value in additional_dataset_dfs.items():\n",
        "      dataset_per_file_dfs[key] = value\n",
        "\n",
        "  # append all the files as one dataframe\n",
        "  for key, value in dataset_per_file_dfs.items():\n",
        "    # print(key, '\\t', i, '\\t', dataset_per_file_df[key].shape[0])\n",
        "    dataset_df = dataset_df.append(dataset_per_file_dfs[key], ignore_index=True)\n",
        "  return dataset_df"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qXBTf96GQeBI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def clean_dataframe_format(df, new_column_name_list, drop_column_list=[]):\n",
        "  # drop unnecessary column\n",
        "  df = df.drop(columns=drop_column_list)\n",
        "  \n",
        "  # rename column\n",
        "  df.columns = new_column_name_list\n",
        "\n",
        "  # remove row in dataframe if the 'text' or 'sentiment' column value is missing\n",
        "  df = df.dropna(subset=['sentiment', 'text'], how='any').reset_index(drop=True)\n",
        "  \n",
        "  # remove row if the sentiment is not 'positive', 'negative' or 'neutral'\n",
        "  # this happens in the dataset, for example, there are some rows\n",
        "  # where its sentiments are 'off topic'\n",
        "  valid_sentiments = ['positive', 'negative', 'neutral']\n",
        "  df = df[df['sentiment'].isin(valid_sentiments)].reset_index(drop=True)\n",
        "  return df"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "znGSEFNntmVa",
        "colab_type": "code",
        "outputId": "0081cb73-8090-4749-e985-ed7cfe35591a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "# read dataset files and append it as one pandas dataframe\n",
        "if cfg['task_a']['use_additional_dataset']:\n",
        "  task_a_train_df = append_txt_files_as_one_dataframe(cfg['paths']['train_folder_task_a'], ['twitter'], task_a_train_additional_dfs)\n",
        "else:\n",
        "  task_a_train_df = append_txt_files_as_one_dataframe(cfg['paths']['train_folder_task_a'], ['twitter'])\n",
        "\n",
        "task_a_train_df = clean_dataframe_format(task_a_train_df, ['id', 'sentiment', 'text'], drop_column_list=[3])\n",
        "\n",
        "# # save dataset as csv file\n",
        "# with pd.option_context('display.max_columns', None):  # more options can be specified also\n",
        "#     print(task_a_train_df)\n",
        "\n",
        "# print(task_a_train_df.shape)"
      ],
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2000, 3) twitter-2016devtest-A.txt\n",
            "(1999, 3) twitter-2016dev-A.txt\n",
            "(6000, 3) twitter-2016train-A.txt\n",
            "(1654, 3) twitter-2013dev-A.txt\n",
            "(3547, 3) twitter-2013test-A.txt\n",
            "(9684, 3) twitter-2013train-A.txt\n",
            "(1853, 3) twitter-2014test-A.txt\n",
            "(2390, 3) twitter-2015test-A.txt\n",
            "(489, 3) twitter-2015train-A.txt\n",
            "(86, 3) twitter-2014sarcasm-A.txt\n",
            "(20633, 4) twitter-2016test-A.txt\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R_Aem1fwuZB8",
        "colab_type": "code",
        "outputId": "ad18272b-2d99-4407-f46f-e7aaaebe77e4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        }
      },
      "source": [
        "task_b_train_df = append_txt_files_as_one_dataframe(cfg['paths']['train_folder_task_b'], ['twitter'])\n",
        "task_b_train_df = clean_dataframe_format(task_b_train_df, ['id', 'topic','sentiment', 'text'], drop_column_list=[4])\n",
        "task_b_train_df.info()"
      ],
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(4346, 4) twitter-2016train-BD.txt\n",
            "(1325, 4) twitter-2016dev-BD.txt\n",
            "(1417, 4) twitter-2016devtest-BD.txt\n",
            "(489, 4) twitter-2015train-BD.txt\n",
            "(10552, 5) twitter-2016test-BD.txt\n",
            "(2383, 5) twitter-2015testBD.txt\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 20508 entries, 0 to 20507\n",
            "Data columns (total 4 columns):\n",
            " #   Column     Non-Null Count  Dtype \n",
            "---  ------     --------------  ----- \n",
            " 0   id         20508 non-null  object\n",
            " 1   topic      20508 non-null  object\n",
            " 2   sentiment  20508 non-null  object\n",
            " 3   text       20508 non-null  object\n",
            "dtypes: object(4)\n",
            "memory usage: 641.0+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B5QJj-YTXg5Z",
        "colab_type": "code",
        "outputId": "10931282-8750-4745-906a-bd1771d195a3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "print(task_b_train_df[\n",
        "                (task_b_train_df['sentiment'] != 'negative') &\n",
        "                (task_b_train_df['sentiment'] != 'positive') &\n",
        "                (task_b_train_df['sentiment'] != 'neutral')\n",
        "                ]['sentiment'])\n",
        "\n",
        "# task_b_train_df\n",
        "\n",
        "# task_b_train_df[task_b_train_df['text'].str.len()< 40]"
      ],
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Series([], Name: sentiment, dtype: object)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1iApuaK7wj9O",
        "colab_type": "code",
        "outputId": "aadf927c-a8b7-4a4f-edfc-82411b48d7e5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        }
      },
      "source": [
        "task_a_test_df = pd.read_csv(cfg['paths']['test_file_task_a'], sep='\\t', header=None, quoting=csv.QUOTE_NONE)\n",
        "task_a_test_df = clean_dataframe_format(task_a_test_df, ['id', 'sentiment', 'text'])\n",
        "task_a_test_df"
      ],
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>sentiment</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>801989080477154944</td>\n",
              "      <td>neutral</td>\n",
              "      <td>#ArianaGrande Ari By Ariana Grande 80% Full ht...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>801989272341453952</td>\n",
              "      <td>positive</td>\n",
              "      <td>Ariana Grande KIIS FM Yours Truly CD listening...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>801990978424962944</td>\n",
              "      <td>positive</td>\n",
              "      <td>Ariana Grande White House Easter Egg Roll in W...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>801996232553963008</td>\n",
              "      <td>positive</td>\n",
              "      <td>#CD #Musics Ariana Grande Sweet Like Candy 3.4...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>801998343442407040</td>\n",
              "      <td>neutral</td>\n",
              "      <td>SIDE TO SIDE 😘 @arianagrande #sidetoside #aria...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12279</th>\n",
              "      <td>805699615781625856</td>\n",
              "      <td>positive</td>\n",
              "      <td>@dansen17 update: Zac Efron kissing a puppy ht...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12280</th>\n",
              "      <td>805701709356003328</td>\n",
              "      <td>neutral</td>\n",
              "      <td>#zac efron sex pic skins michelle sex https://...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12281</th>\n",
              "      <td>805701818357579776</td>\n",
              "      <td>neutral</td>\n",
              "      <td>First Look at Neighbors 2 with Zac Efron Shirt...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12282</th>\n",
              "      <td>805703557081075712</td>\n",
              "      <td>neutral</td>\n",
              "      <td>zac efron poses nude #lovely libra porn https:...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12283</th>\n",
              "      <td>805704324105940992</td>\n",
              "      <td>neutral</td>\n",
              "      <td>#Fashion #Style The Paperboy (NEW Blu-ray Disc...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>12284 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                       id  ...                                               text\n",
              "0      801989080477154944  ...  #ArianaGrande Ari By Ariana Grande 80% Full ht...\n",
              "1      801989272341453952  ...  Ariana Grande KIIS FM Yours Truly CD listening...\n",
              "2      801990978424962944  ...  Ariana Grande White House Easter Egg Roll in W...\n",
              "3      801996232553963008  ...  #CD #Musics Ariana Grande Sweet Like Candy 3.4...\n",
              "4      801998343442407040  ...  SIDE TO SIDE 😘 @arianagrande #sidetoside #aria...\n",
              "...                   ...  ...                                                ...\n",
              "12279  805699615781625856  ...  @dansen17 update: Zac Efron kissing a puppy ht...\n",
              "12280  805701709356003328  ...  #zac efron sex pic skins michelle sex https://...\n",
              "12281  805701818357579776  ...  First Look at Neighbors 2 with Zac Efron Shirt...\n",
              "12282  805703557081075712  ...  zac efron poses nude #lovely libra porn https:...\n",
              "12283  805704324105940992  ...  #Fashion #Style The Paperboy (NEW Blu-ray Disc...\n",
              "\n",
              "[12284 rows x 3 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KqE-Y6XJBeA2",
        "colab_type": "code",
        "outputId": "767ec888-628c-4b21-fab4-d8266bb78729",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        }
      },
      "source": [
        "task_b_test_df = pd.read_csv(cfg['paths']['test_file_task_b'], sep='\\t', header=None, quoting=csv.QUOTE_NONE)\n",
        "task_b_test_df = clean_dataframe_format(task_b_test_df, ['id', 'topic', 'sentiment', 'text'])\n",
        "task_b_test_df"
      ],
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>topic</th>\n",
              "      <th>sentiment</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>801989272341453952</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>Ariana Grande KIIS FM Yours Truly CD listening...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>801990978424962944</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>Ariana Grande White House Easter Egg Roll in W...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>801996232553963008</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>#CD #Musics Ariana Grande Sweet Like Candy 3.4...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>801998343442407040</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>SIDE TO SIDE 😘 @arianagrande #sidetoside #aria...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>802001659970744064</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>Hairspray Live! Previews at the Macy's Thanksg...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6180</th>\n",
              "      <td>805696468959002624</td>\n",
              "      <td>zac efron</td>\n",
              "      <td>positive</td>\n",
              "      <td>Abby *talking about the Hamilton soundtrack\": ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6181</th>\n",
              "      <td>805699412257181697</td>\n",
              "      <td>zac efron</td>\n",
              "      <td>positive</td>\n",
              "      <td>can we like get zac efron or justin bieber for...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6182</th>\n",
              "      <td>805699615781625856</td>\n",
              "      <td>zac efron</td>\n",
              "      <td>positive</td>\n",
              "      <td>@dansen17 update: Zac Efron kissing a puppy ht...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6183</th>\n",
              "      <td>805701818357579776</td>\n",
              "      <td>zac efron</td>\n",
              "      <td>positive</td>\n",
              "      <td>First Look at Neighbors 2 with Zac Efron Shirt...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6184</th>\n",
              "      <td>805703557081075712</td>\n",
              "      <td>zac efron</td>\n",
              "      <td>positive</td>\n",
              "      <td>zac efron poses nude #lovely libra porn https:...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6185 rows × 4 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                      id  ...                                               text\n",
              "0     801989272341453952  ...  Ariana Grande KIIS FM Yours Truly CD listening...\n",
              "1     801990978424962944  ...  Ariana Grande White House Easter Egg Roll in W...\n",
              "2     801996232553963008  ...  #CD #Musics Ariana Grande Sweet Like Candy 3.4...\n",
              "3     801998343442407040  ...  SIDE TO SIDE 😘 @arianagrande #sidetoside #aria...\n",
              "4     802001659970744064  ...  Hairspray Live! Previews at the Macy's Thanksg...\n",
              "...                  ...  ...                                                ...\n",
              "6180  805696468959002624  ...  Abby *talking about the Hamilton soundtrack\": ...\n",
              "6181  805699412257181697  ...  can we like get zac efron or justin bieber for...\n",
              "6182  805699615781625856  ...  @dansen17 update: Zac Efron kissing a puppy ht...\n",
              "6183  805701818357579776  ...  First Look at Neighbors 2 with Zac Efron Shirt...\n",
              "6184  805703557081075712  ...  zac efron poses nude #lovely libra porn https:...\n",
              "\n",
              "[6185 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0OirqNXwXfQx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Checking and compare the frequency with what's written in the paper\n",
        "# # save dataset as csv file\n",
        "# task_a_train_df.to_csv('coba_train_a.csv', sep='\\t')\n",
        "\n",
        "# assert task_a_train_df[task_a_train_df['sentiment'] == 'positive'].shape[0] == 19902  #SALAH\n",
        "assert task_a_train_df[task_a_train_df['sentiment'] == 'negative'].shape[0] == 7840\n",
        "assert task_a_train_df[task_a_train_df['sentiment'] == 'neutral'].shape[0] == 22591\n",
        "\n",
        "assert task_a_test_df[task_a_test_df['sentiment'] == 'positive'].shape[0] == 2375\n",
        "assert task_a_test_df[task_a_test_df['sentiment'] == 'negative'].shape[0] == 3972\n",
        "assert task_a_test_df[task_a_test_df['sentiment'] == 'neutral'].shape[0] == 5937\n",
        "\n",
        "assert len(task_b_train_df['topic'].unique()) == 373\n",
        "assert task_b_train_df[task_b_train_df['sentiment'] == 'positive'].shape[0] == 14951\n",
        "assert task_b_train_df[task_b_train_df['sentiment'] == 'negative'].shape[0] == 4013\n",
        "assert task_b_train_df[task_b_train_df['sentiment'] == 'neutral'].shape[0] == 1544\n",
        "\n",
        "\n",
        "assert len(task_b_test_df['topic'].unique()) == 125\n",
        "assert task_b_test_df[task_b_test_df['sentiment'] == 'positive'].shape[0] == 2463\n",
        "assert task_b_test_df[task_b_test_df['sentiment'] == 'negative'].shape[0] == 3722"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9KGklVjRx50N",
        "colab_type": "text"
      },
      "source": [
        "## Tokenization"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NwjXcI3Gx7xb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "23f42bdd-a10d-41ae-bd41-6af2cb890e9b"
      },
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "from ekphrasis.classes.tokenizer import SocialTokenizer\n",
        "from ekphrasis.dicts.emoticons import emoticons\n",
        "from ekphrasis.classes.preprocessor import TextPreProcessor\n",
        "\n",
        "text_processor = TextPreProcessor(\n",
        "  # normalized these terms (ex: \"google.com\" into \"<url>\")\n",
        "  normalize = ['url', 'email', 'percent', 'money', 'phone', 'user',\n",
        "              'time', 'date', 'number'],\n",
        "\n",
        "  # annotate these terms (ex: \"#win\" into [\"<hashtag>\", \"win\", \"</hashtag>\"])\n",
        "  annotate = {'hashtag', 'allcaps', 'elongated', 'repeated', 'emphasis', 'censored'},\n",
        "  fix_html=True,\n",
        "  segmenter = 'twitter',\n",
        "  corrector='twitter',\n",
        "  unpack_hashtags=True,\n",
        "  unpack_contractions=True,\n",
        "  spell_correct_elong=False,\n",
        "  tokenizer = SocialTokenizer(lowercase=True).tokenize,\n",
        "  dicts = [emoticons]\n",
        ")\n",
        "\n",
        "def tokenize_df(df, input_column_name='text', output_column_name='tokenized'):\n",
        "  df[output_column_name] = df.apply(\n",
        "    lambda row: text_processor.pre_process_doc(\n",
        "        row[input_column_name]\n",
        "    ),\n",
        "    axis=1)\n",
        "  \n",
        "  return df"
      ],
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Reading twitter - 1grams ...\n",
            "Reading twitter - 2grams ...\n",
            "Reading twitter - 1grams ...\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "paxv3Xsw0fkT",
        "colab_type": "code",
        "outputId": "0e736a0e-ddc1-458e-e12b-0d4e8545d676",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 546
        }
      },
      "source": [
        "# tokenizer = nltk.tokenize.TweetTokenizer(\n",
        "#     strip_handles = cfg['preprocessing']['tokenization']['remove_twitter_handle'],\n",
        "#     preserve_case = cfg['preprocessing']['tokenization']['preserve_case']\n",
        "# )\n",
        "\n",
        "task_a_train_df = tokenize_df(task_a_train_df)\n",
        "task_b_train_df = tokenize_df(task_b_train_df)\n",
        "task_a_test_df = tokenize_df(task_a_test_df)\n",
        "task_b_test_df = tokenize_df(task_b_test_df)\n",
        "\n",
        "\n",
        "# print sample result\n",
        "task_b_test_df.head(10)"
      ],
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>topic</th>\n",
              "      <th>sentiment</th>\n",
              "      <th>text</th>\n",
              "      <th>tokenized</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>801989272341453952</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>Ariana Grande KIIS FM Yours Truly CD listening...</td>\n",
              "      <td>[ariana, grande, &lt;allcaps&gt;, kiis, fm, &lt;/allcap...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>801990978424962944</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>Ariana Grande White House Easter Egg Roll in W...</td>\n",
              "      <td>[ariana, grande, white, house, easter, egg, ro...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>801996232553963008</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>#CD #Musics Ariana Grande Sweet Like Candy 3.4...</td>\n",
              "      <td>[&lt;hashtag&gt;, cd, &lt;/hashtag&gt;, &lt;hashtag&gt;, musics,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>801998343442407040</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>SIDE TO SIDE 😘 @arianagrande #sidetoside #aria...</td>\n",
              "      <td>[&lt;allcaps&gt;, side, to, side, &lt;/allcaps&gt;, 😘, &lt;us...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>802001659970744064</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>Hairspray Live! Previews at the Macy's Thanksg...</td>\n",
              "      <td>[hairspray, live, !, previews, at, the, macy, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>802003380973568000</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>#LindsayLohan Is ‘Feeling Thankful’ After Blas...</td>\n",
              "      <td>[&lt;hashtag&gt;, lindsay, lohan, &lt;/hashtag&gt;, is, ‘,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>802014830467174016</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>negative</td>\n",
              "      <td>I hate her but... I love her songs Dammit ._.#...</td>\n",
              "      <td>[i, hate, her, but, ., &lt;repeated&gt;, i, love, he...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>802022559520673024</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>My idols are #littlemix #justinbieber #arianag...</td>\n",
              "      <td>[my, idols, are, &lt;hashtag&gt;, little, mix, &lt;/has...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>802024085777629056</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>#Beauty #ArianaGrande-CHRISTMAS &amp; CHILL-JAPAN ...</td>\n",
              "      <td>[&lt;hashtag&gt;, beauty, &lt;/hashtag&gt;, &lt;hashtag&gt;, ari...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>802028835013206016</td>\n",
              "      <td>#ArianaGrande</td>\n",
              "      <td>positive</td>\n",
              "      <td>#Beauty #ArianaGrande-THE REMIX-JAPAN ONLY #CD...</td>\n",
              "      <td>[&lt;hashtag&gt;, beauty, &lt;/hashtag&gt;, &lt;hashtag&gt;, ari...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                   id  ...                                          tokenized\n",
              "0  801989272341453952  ...  [ariana, grande, <allcaps>, kiis, fm, </allcap...\n",
              "1  801990978424962944  ...  [ariana, grande, white, house, easter, egg, ro...\n",
              "2  801996232553963008  ...  [<hashtag>, cd, </hashtag>, <hashtag>, musics,...\n",
              "3  801998343442407040  ...  [<allcaps>, side, to, side, </allcaps>, 😘, <us...\n",
              "4  802001659970744064  ...  [hairspray, live, !, previews, at, the, macy, ...\n",
              "5  802003380973568000  ...  [<hashtag>, lindsay, lohan, </hashtag>, is, ‘,...\n",
              "6  802014830467174016  ...  [i, hate, her, but, ., <repeated>, i, love, he...\n",
              "7  802022559520673024  ...  [my, idols, are, <hashtag>, little, mix, </has...\n",
              "8  802024085777629056  ...  [<hashtag>, beauty, </hashtag>, <hashtag>, ari...\n",
              "9  802028835013206016  ...  [<hashtag>, beauty, </hashtag>, <hashtag>, ari...\n",
              "\n",
              "[10 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iFnxpFTZEe7E",
        "colab_type": "text"
      },
      "source": [
        "# Exploratory Data Analysis (EDA)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cUrnPEtN76nc",
        "colab_type": "text"
      },
      "source": [
        "## Word Cloud"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sXTNP_1975_d",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def show_wordcloud(text, title, max_words=200):\n",
        "  wc = WordCloud(\n",
        "      max_words=max_words,\n",
        "      background_color='white',\n",
        "      # ranks_only= frequency\n",
        "  ).generate(text)\n",
        "\n",
        "  print(wc.words_)\n",
        "\n",
        "  fig = plt.figure(1, figsize=(12, 12))\n",
        "  fig.suptitle(title)\n",
        "  plt.imshow(wc)\n",
        "  plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0MWVlPVeEit3",
        "colab_type": "code",
        "outputId": "98e2bfdc-e65a-4496-fbe0-694e8cf4adf6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699
        }
      },
      "source": [
        "df = task_b_train_df[task_b_train_df['sentiment'] == 'positive']['text'][4]\n",
        "print(df)\n",
        "# print(df.shape)\n",
        "# show_wordcloud(str(df.values), 'judul', max_words=20000)\n",
        "\n",
        "# print(df.shape)\n",
        "word_string = \"you verse wrote book stand titlea i you you you kampung\"\n",
        "print(type(word_string))\n",
        "show_wordcloud(word_string, 'judul', max_words=20000)"
      ],
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Microsoft, I may not prefer your gaming branch of business. But, you do make a damn fine operating system. #Windows10 @Microsoft\n",
            "<class 'str'>\n",
            "{'verse': 1.0, 'wrote': 1.0, 'book': 1.0, 'stand': 1.0, 'titlea': 1.0, 'kampung': 1.0}\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x864 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MZGMBtM98uTq",
        "colab_type": "code",
        "outputId": "acbfe36b-e7fc-4667-8845-0d0650077bd3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 329
        }
      },
      "source": [
        "task_a_train_df['sentiment'].value_counts().plot(kind='bar',figsize=(7,4));\n",
        "plt.title('Number of tweets');\n",
        "plt.xlabel('Sentiment');\n",
        "plt.ylabel('Total tweets');"
      ],
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 504x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d7YGmqNd2WrP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D5oxkBMoH5hp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dt4arEBt4ntG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gauu8B_i9XHn",
        "colab_type": "code",
        "outputId": "0fc3e764-5a57-4af9-8a01-abcdb9f5af4b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 589
        }
      },
      "source": [
        "task_b_train_df[task_b_train_df['text'].str.contains('not')]"
      ],
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>topic</th>\n",
              "      <th>sentiment</th>\n",
              "      <th>text</th>\n",
              "      <th>tokenized</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>629226490152914944</td>\n",
              "      <td>@microsoft</td>\n",
              "      <td>positive</td>\n",
              "      <td>Microsoft, I may not prefer your gaming branch...</td>\n",
              "      <td>[microsoft, ,, i, may, not, prefer, your, gami...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>629797991826722816</td>\n",
              "      <td>@microsoft</td>\n",
              "      <td>negative</td>\n",
              "      <td>After attempting a reinstall, it still bricks,...</td>\n",
              "      <td>[after, attempting, a, reinstall, ,, it, still...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>631543121407442946</td>\n",
              "      <td>@microsoft</td>\n",
              "      <td>negative</td>\n",
              "      <td>@Microsoft support for 365 has been terrible. ...</td>\n",
              "      <td>[&lt;user&gt;, support, for, &lt;number&gt;, has, been, te...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>632536348419690496</td>\n",
              "      <td>@microsoft</td>\n",
              "      <td>negative</td>\n",
              "      <td>@eyesonfoxorg @Microsoft I'm still using Vista...</td>\n",
              "      <td>[&lt;user&gt;, &lt;user&gt;, i, am, still, using, vista, o...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>632810315227467776</td>\n",
              "      <td>@microsoft</td>\n",
              "      <td>negative</td>\n",
              "      <td>@MisterMetokur @Microsoft @ATT @NSAGov That's ...</td>\n",
              "      <td>[&lt;user&gt;, &lt;user&gt;, &lt;user&gt;, &lt;user&gt;, that, ', s, c...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20474</th>\n",
              "      <td>520384978820296705</td>\n",
              "      <td>yougov</td>\n",
              "      <td>negative</td>\n",
              "      <td>\"@LouiseBaldock great work; you may or may not...</td>\n",
              "      <td>[\", &lt;user&gt;, great, work, ;, you, may, or, may,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20476</th>\n",
              "      <td>519600072971927555</td>\n",
              "      <td>yougov</td>\n",
              "      <td>neutral</td>\n",
              "      <td>\"YouGov tonight  shows 2% Labour lead. So head...</td>\n",
              "      <td>[\", yougov, tonight, shows, &lt;percent&gt;, labour,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20481</th>\n",
              "      <td>519201436102848512</td>\n",
              "      <td>yougov</td>\n",
              "      <td>neutral</td>\n",
              "      <td>IF tonight's YouGov shows another Tory lead th...</td>\n",
              "      <td>[if, tonight, ', s, yougov, shows, another, to...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20488</th>\n",
              "      <td>520337071345795073</td>\n",
              "      <td>yougov</td>\n",
              "      <td>neutral</td>\n",
              "      <td>\"Tonight's YouGov: Lab 35, Con 30, UKIP 15, Li...</td>\n",
              "      <td>[\", tonight, ', s, yougov, :, lab, &lt;number&gt;, ,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20506</th>\n",
              "      <td>522912399322394624</td>\n",
              "      <td>younique</td>\n",
              "      <td>positive</td>\n",
              "      <td>Get the best mascara in the industry here! Im ...</td>\n",
              "      <td>[get, the, best, mascara, in, the, industry, h...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1558 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                       id  ...                                          tokenized\n",
              "4      629226490152914944  ...  [microsoft, ,, i, may, not, prefer, your, gami...\n",
              "8      629797991826722816  ...  [after, attempting, a, reinstall, ,, it, still...\n",
              "16     631543121407442946  ...  [<user>, support, for, <number>, has, been, te...\n",
              "20     632536348419690496  ...  [<user>, <user>, i, am, still, using, vista, o...\n",
              "22     632810315227467776  ...  [<user>, <user>, <user>, <user>, that, ', s, c...\n",
              "...                   ...  ...                                                ...\n",
              "20474  520384978820296705  ...  [\", <user>, great, work, ;, you, may, or, may,...\n",
              "20476  519600072971927555  ...  [\", yougov, tonight, shows, <percent>, labour,...\n",
              "20481  519201436102848512  ...  [if, tonight, ', s, yougov, shows, another, to...\n",
              "20488  520337071345795073  ...  [\", tonight, ', s, yougov, :, lab, <number>, ,...\n",
              "20506  522912399322394624  ...  [get, the, best, mascara, in, the, industry, h...\n",
              "\n",
              "[1558 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XWrBCXtSH4P-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "outputId": "79ca3103-ec17-464c-b8d3-1ca1b29cd2b6"
      },
      "source": [
        "task_b_train_df.tokenized[0]"
      ],
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['dear',\n",
              " '<user>',\n",
              " 'the',\n",
              " 'newooffice',\n",
              " 'for',\n",
              " 'mac',\n",
              " 'is',\n",
              " 'great',\n",
              " 'and',\n",
              " 'all',\n",
              " ',',\n",
              " 'but',\n",
              " 'no',\n",
              " 'lync',\n",
              " 'update',\n",
              " '?',\n",
              " 'c',\n",
              " \"'\",\n",
              " 'mon',\n",
              " '.']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nwFx7A43Aju4",
        "colab_type": "code",
        "outputId": "20e723ee-bcfa-4e85-98f1-cceac976c466",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "positive = task_b_train_df[task_b_train_df['sentiment'] == 'positive']['topic'].value_counts(sort=False).to_frame(name='positive')\n",
        "negative = task_b_train_df[task_b_train_df['sentiment'] == 'negative']['topic'].value_counts(sort=False).to_frame(name='negative')\n",
        "neutral = task_b_train_df[task_b_train_df['sentiment'] == 'neutral']['topic'].value_counts(sort=False).to_frame(name='neutral')\n",
        "# negative = task_b_train_df['topic'][task_b_train_df['sentiment'] == 'negative'].value_counts(sort=False)\n",
        "# neutral = task_b_train_df['topic'][task_b_train_df['sentiment'] == 'neutral'].value_counts(sort=False)\n",
        "joined = positive.join(negative).join(neutral)\n",
        "\n",
        "joined = joined[(joined['positive'] > 0) & (joined['negative']>0)]\n",
        "with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also\n",
        "    print(joined)\n",
        "\n",
        "plt.bar(range(joined.shape[0]), joined['positive'], label='positive', color='blue')\n",
        "plt.bar(range(joined.shape[0]), joined['negative'], label='negative', color='red', bottom=joined['positive'])"
      ],
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                       positive  negative  neutral\n",
            "curtis painter                5       7.0      5.0\n",
            "dunkin                      156      18.0      NaN\n",
            "mariah carey                 77       3.0      NaN\n",
            "paper towns                 167       8.0      NaN\n",
            "tom brady                    77      33.0      NaN\n",
            "kyle                          9       4.0      6.0\n",
            "brian cushing                 3       6.0     11.0\n",
            "tiger woods                  46      19.0      NaN\n",
            "frank gifford               151       5.0      NaN\n",
            "big brother                 135      38.0      NaN\n",
            "ruto                          3       3.0     13.0\n",
            "russell wilson                3       4.0     10.0\n",
            "chris brown                  76       6.0      NaN\n",
            "lady gaga                    71       5.0      NaN\n",
            "simmons                      13       1.0      5.0\n",
            "chris evans                  94      27.0      NaN\n",
            "kesha                         6       2.0     11.0\n",
            "american horror story         8       5.0      5.0\n",
            "george harrison              48       1.0      NaN\n",
            "vampire diaries              15       1.0      4.0\n",
            "pride parade                 75       2.0      NaN\n",
            "u2                           85       8.0      NaN\n",
            "madonna                      77       2.0      NaN\n",
            "brit award                    9       1.0      NaN\n",
            "george osborne               29      39.0      NaN\n",
            "ice cube                    134      14.0      NaN\n",
            "tegan                         9       2.0      8.0\n",
            "denzel                        5       1.0      4.0\n",
            "liam                         11       2.0      7.0\n",
            "obama                        21      40.0      NaN\n",
            "taylor swift                 84       1.0      NaN\n",
            "janet jackson                95       3.0      NaN\n",
            "twilight                    114      28.0      NaN\n",
            "afghans                       1       2.0      7.0\n",
            "cate blanchett               41       2.0      NaN\n",
            "nabeel rajab                  1       3.0      2.0\n",
            "national hot dog day        148       3.0      NaN\n",
            "tony blair                   10      65.0      NaN\n",
            "google+                      44      19.0      NaN\n",
            "seth rollins                 74      32.0      NaN\n",
            "bellusci                      4       1.0      5.0\n",
            "asiata                        1       4.0     14.0\n",
            "john cena                   121      24.0      NaN\n",
            "jimmy fallon                  8       1.0     11.0\n",
            "zlatan                       60       4.0      NaN\n",
            "sam smith                   149      17.0      NaN\n",
            "demi lovato                  11       1.0      8.0\n",
            "amazon prime day             43      43.0      NaN\n",
            "monster hunter                9       1.0      7.0\n",
            "sarah palin                   7      53.0      NaN\n",
            "aaron rodgers                13       3.0     16.0\n",
            "rousey                       61      23.0      NaN\n",
            "milan                       142      18.0      NaN\n",
            "kerry                        39      19.0      NaN\n",
            "eid                         123       4.0      NaN\n",
            "ac/dc                        89       2.0      NaN\n",
            "jennifer lawrence             7       1.0     11.0\n",
            "israel                       50      63.0      NaN\n",
            "stoops                        3       5.0     12.0\n",
            "ipod                         56       7.0      NaN\n",
            "nike                         55       9.0      NaN\n",
            "swachh bharat                 3       2.0     15.0\n",
            "ric flair                    61       1.0      NaN\n",
            "wednesday adams               7       3.0      9.0\n",
            "david taylor                  1       1.0      8.0\n",
            "cupid                         1       2.0      7.0\n",
            "randy orton                  36       7.0      NaN\n",
            "kershaw                       4       2.0     13.0\n",
            "hillary                      22      48.0      NaN\n",
            "christians                   56      50.0      NaN\n",
            "moto g                       58       4.0      NaN\n",
            "katy perry                   57       8.0      6.0\n",
            "the big bang theory           9       1.0     10.0\n",
            "disney                       12       1.0      7.0\n",
            "john kasich                  48      24.0      NaN\n",
            "jurassic world               84       5.0      NaN\n",
            "jurassic park                86       2.0      NaN\n",
            "red bull                      5       3.0     10.0\n",
            "ihop                         81       3.0      NaN\n",
            "iran                         15      61.0      NaN\n",
            "foo fighters                228       3.0      NaN\n",
            "valentine 's day             54       7.0      NaN\n",
            "school                        3      10.0      7.0\n",
            "justin                       69       9.0      NaN\n",
            "ed sheeran                  163       5.0      NaN\n",
            "niall                       130      14.0     11.0\n",
            "kobe bryant                  13       4.0      3.0\n",
            "david price                 114       9.0      NaN\n",
            "jan hooks                     3       2.0      9.0\n",
            "adidas                        1       1.0      8.0\n",
            "tgif                         84       2.0      NaN\n",
            "cowboys                       6       3.0      9.0\n",
            "ventura                       8       2.0      8.0\n",
            "juventus                     35      11.0      NaN\n",
            "scotus                       18      31.0      NaN\n",
            "white sox                    38      15.0      NaN\n",
            "watchman                     55       5.0      NaN\n",
            "galatasaray                   3       8.0      7.0\n",
            "sharknado                   132      39.0      NaN\n",
            "green bay                     2       2.0     15.0\n",
            "icc                           5       1.0     13.0\n",
            "the vamps                    55       5.0      NaN\n",
            "carlo ancelotti               9       3.0      7.0\n",
            "leeds united                  8       1.0     10.0\n",
            "brook lopez                   7       3.0      NaN\n",
            "jessica                       9       2.0      9.0\n",
            "brian kelly                   6       3.0      8.0\n",
            "valentine                    55       4.0      NaN\n",
            "amy schumer                  47      13.0      NaN\n",
            "yougov                        5       3.0     11.0\n",
            "bentley                      65       3.0      NaN\n",
            "friday night lights          12       1.0      7.0\n",
            "kendrick lamar               89      16.0      NaN\n",
            "xbox                         55       7.0      NaN\n",
            "act                           1       2.0      5.0\n",
            "carling cup                   3       1.0      5.0\n",
            "tsipras                      25      21.0      NaN\n",
            "eric church                  90       3.0      NaN\n",
            "super eagles                 38       2.0      NaN\n",
            "sony                         49      14.0      NaN\n",
            "scott walker                 18      54.0      NaN\n",
            "curtis                       86      13.0      NaN\n",
            "ucla                          2       1.0     16.0\n",
            "lax                           5       1.0     14.0\n",
            "oracle                       46       8.0      NaN\n",
            "saudi arabia                 14      57.0      NaN\n",
            "tory                         14      46.0      NaN\n",
            "kpop                         67       9.0      NaN\n",
            "planned parenthood           11      46.0      NaN\n",
            "carly fiorina               108      17.0      NaN\n",
            "donald trump                 16      44.0      NaN\n",
            "georgia dome                  7       1.0     12.0\n",
            "cfb                           2       1.0     17.0\n",
            "muslims                      30      96.0      NaN\n",
            "frank ocean                 110      38.0      NaN\n",
            "erdogan                       3      58.0      NaN\n",
            "chelsea                      59      10.0      5.0\n",
            "lsu                           4       1.0     14.0\n",
            "vettel                        3       2.0     14.0\n",
            "colts                        10       1.0      7.0\n",
            "islam                        68      69.0      NaN\n",
            "zayn                        107      10.0      NaN\n",
            "seinfeld                     75       2.0      NaN\n",
            "kanye west                   70      71.0      NaN\n",
            "apple                        57      11.0      NaN\n",
            "ghoncheh ghavami              3       1.0      2.0\n",
            "arian foster                  8       3.0      6.0\n",
            "atleti                        3       3.0     10.0\n",
            "redskins                      4       2.0     14.0\n",
            "narendra modi                 4       1.0     15.0\n",
            "fabian delph                  4       3.0      1.0\n",
            "messi                        74       3.0      NaN\n",
            "naruto                      152      10.0      NaN\n",
            "gucci                        68      18.0      NaN\n",
            "ant-man                     221       8.0      NaN\n",
            "charlie hebdo                12      43.0      NaN\n",
            "justin bieber               117      27.0      NaN\n",
            "venice beach                 88       3.0      NaN\n",
            "dustin johnson               91      31.0      NaN\n",
            "paul dunne                  142      10.0      NaN\n",
            "grateful dead                86       2.0      NaN\n",
            "a$ap rocky                    6       1.0      3.0\n",
            "independence day              6       1.0     12.0\n",
            "boehner                       1       7.0     10.0\n",
            "kurt cobain                  61       7.0      NaN\n",
            "packers                       6       2.0     10.0\n",
            "david beckham                76       3.0      NaN\n",
            "rbi                           4       1.0     14.0\n",
            "ted 2                        81       7.0      NaN\n",
            "jay-z                        59      14.0      NaN\n",
            "abc                           4       2.0     14.0\n",
            "dana white                   15      25.0      NaN\n",
            "alonso                        1       7.0     11.0\n",
            "monsanto                      7      54.0      NaN\n",
            "david cameron                25      38.0      NaN\n",
            "bulls                         9       1.0     10.0\n",
            "rolling stone                39       8.0      NaN\n",
            "bob marley                   89       3.0      NaN\n",
            "mikasa                       11       1.0      8.0\n",
            "yakub                         5     105.0      NaN\n",
            "ira                          10     111.0      NaN\n",
            "digi                         72       2.0      NaN\n",
            "chuck norris                 32       6.0      NaN\n",
            "bbc                          36      16.0      NaN\n",
            "caitlyn jenner               24      69.0      NaN\n",
            "murray                       90      24.0      NaN\n",
            "rebecca black                 6       3.0     10.0\n",
            "pope                         58       5.0      NaN\n",
            "kris jenner                   4       2.0     11.0\n",
            "snoop dogg                   61       6.0      NaN\n",
            "labor day                    61       7.0      NaN\n",
            "joe biden                    40      18.0      NaN\n",
            "boise state                   4       1.0     11.0\n",
            "white house                   2       1.0     17.0\n",
            "windows 10                   43      18.0      NaN\n",
            "shawn                       155       5.0      NaN\n",
            "democrats                     1       4.0      9.0\n",
            "arsenal                      45      15.0      8.0\n",
            "yoga                         80       1.0      NaN\n",
            "gilmore girls                 7       4.0      7.0\n",
            "gandhi                        5       1.0     14.0\n",
            "ibm                          64       5.0      NaN\n",
            "netflix                      88       6.0      7.0\n",
            "nintendo                     54       8.0      NaN\n",
            "bobby jindal                 19      37.0      NaN\n",
            "batman                       64       5.0      NaN\n",
            "amazon prime                 70      18.0      NaN\n",
            "lexus                        70       5.0      NaN\n",
            "serena                       73       1.0      NaN\n",
            "academy awards                1       2.0      7.0\n",
            "hannibal                     82       4.0      NaN\n",
            "michelle obama               47      17.0      NaN\n",
            "ukip                         28      31.0      NaN\n",
            "europa league                 3       2.0     15.0\n",
            "thor                        138      18.0      NaN\n",
            "rodgers                       3       5.0     10.0\n",
            "iron maiden                 133       3.0      NaN\n",
            "disneyland                   92       2.0      NaN\n",
            "beyonce                      84       2.0      NaN\n",
            "bad blood                    49      17.0      NaN\n",
            "hulk hogan                   44      50.0      NaN\n",
            "google                       35      15.0     11.0\n",
            "carling cup final             3       1.0      6.0\n",
            "david bowie                  93       3.0      NaN\n",
            "atletico madrid               4       1.0     13.0\n",
            "green day                     8       1.0      9.0\n",
            "james rodriguez              13       3.0      4.0\n",
            "floyd mayweather             37      27.0      NaN\n",
            "jeb bush                      4      55.0      NaN\n",
            "apple watch                  53       8.0      NaN\n",
            "bernie sanders               76       9.0      NaN\n",
            "@microsoft                   34      46.0      NaN\n",
            "james franklin                2      10.0      7.0\n",
            "trump                        26      42.0      NaN\n",
            "wwat                         13       1.0      5.0\n",
            "metlife                      69       5.0      NaN\n",
            "xmas                          8       2.0      8.0\n",
            "charles darwin                1       1.0      5.0\n",
            "donny                         6       3.0      6.0\n",
            "lee soo man                  12       2.0      2.0\n",
            "selena                        8       1.0     11.0\n",
            "miss usa                     41       6.0      NaN\n",
            "bolton                        3       1.0     13.0\n",
            "dark souls                   73      14.0      NaN\n",
            "red sox                      73      22.0      NaN\n",
            "rick perry                   23      41.0      NaN\n",
            "star wars                    88       2.0      NaN\n",
            "brock lesnar                108      14.0      NaN\n",
            "t-mobile                     44      21.0      NaN\n",
            "magic mike xxl               89       3.0      NaN\n",
            "ios                          47       5.0      NaN\n",
            "kendrick                    147      32.0      NaN\n",
            "kris bryant                  93       8.0      NaN\n",
            "vikings                       5       3.0     11.0\n",
            "christian ponder              7       7.0      2.0\n",
            "ps4                         105      10.0      NaN\n",
            "nicki                        99      32.0      NaN\n",
            "david wright                 92       7.0      NaN\n",
            "tvd                           9       2.0      5.0\n",
            "kim kardashian               34      23.0      NaN\n",
            "federer                      75       1.0      NaN\n",
            "rahul gandhi                 28      46.0      NaN\n",
            "ipad                         63       4.0      NaN\n",
            "aaron samuels                 2       4.0     11.0\n",
            "angela merkel                23      23.0      NaN\n",
            "bill maher                    4       6.0      9.0\n",
            "ryan braun                   51       9.0      NaN\n",
            "harry potter                 80       2.0      NaN\n",
            "cannavaro                     5       2.0      2.0\n",
            "dean ambrose                 21       4.0      NaN\n",
            "delhi police                  2       2.0     11.0\n",
            "kane                         62      31.0      NaN\n",
            "tom cruise                   61      13.0      NaN\n",
            "modi                          6       4.0      9.0\n",
            "real madrid                  19      16.0      NaN\n",
            "amazon                       57      16.0      NaN\n",
            "prince george               125       2.0      NaN\n",
            "galaxy note                  71       6.0      NaN\n",
            "ashton                       12       2.0      5.0\n",
            "nirvana                     126       3.0      NaN\n",
            "jason aldean                138       2.0      NaN\n",
            "chris maguire                 2       1.0      2.0\n",
            "michael jackson              75       1.0      NaN\n",
            "conor mcgregor               80       4.0      NaN\n",
            "barca                        69       6.0      6.0\n",
            "boko haram                    2     149.0      NaN\n",
            "nokia                        59       9.0      NaN\n",
            "careless world                6       1.0      3.0\n",
            "zac brown band              110       3.0      NaN\n",
            "josh hamilton                47       6.0      NaN\n",
            "gay                          50      45.0      NaN\n",
            "paul mccartney              115       1.0      NaN\n",
            "sting                        77       2.0      NaN\n",
            "iphone                       65       5.0      NaN\n",
            "fleetwood mac                89       3.0      NaN\n",
            "minecraft                    82       1.0      NaN\n",
            "ancelotti                    10       2.0      8.0\n",
            "game of thrones              83       3.0      NaN\n",
            "harper                       18      41.0      NaN\n",
            "briana                       48      44.0      NaN\n",
            "ducks                         8       1.0     11.0\n",
            "spx                           4       2.0     12.0\n",
            "ahs                          10       3.0      6.0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 303 artists>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 115
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAASg0lEQVR4nO3dXahl5X3H8d+vjjElStXOdBh06GgYKFNoJ8PBWirBVpro3IyBIONFHYIwpVVIoL2YNNDYi0BaSApCapigZCypL00izkXaxkwF6YWaYzqOo9Z4mijOMM6cxMYYAmk1/17s5+g+e/Y++2Xttdd6nvX9wOGsvfY6ez9v67fWevbLcUQIAFCWX2m6AACA+SPcAaBAhDsAFIhwB4ACEe4AUKBNTRdAkjZv3hw7duxouhgAkJVnnnnmRxGxZdh9rQj3HTt2aHl5ueliAEBWbL866j6mZQCgQIQ7ABSIcAeAAhHuAFAgwh0ACkS4A0CBCHcAKBDhDgAFItwBoECEOyS76RIAmDPCHQAKRLhDFv9qcSJc4SAjhDsAFIhwB4ACEe4AUCDCHQAKRLgDQIEIdwAoEOEOTIi3jCInhDsAFIhwB4ACEe4AUCDCHQAKRLgDQIEIdwAoEOEOAAUi3AGgQIQ7ABSIcAeAAhHuAFAgwh0ACkS4A0CBCHcAKNDYcLe93fbjtl+w/bztT6b1l9t+zPbL6fdlab1t3217xfYJ23vqrgQAYL1JztzflvQXEbFL0rWS7rC9S9IhScciYqekY+m2JN0kaWf6OSjpnrmXGgCwobHhHhFnIuJ7afktSS9KukLSPklH0mZHJN2clvdJuj96npR0qe1tcy85AGCkqebcbe+Q9CFJT0naGhFn0l2vS9qalq+Q9Frfn51K6wAACzJxuNu+WNI3JH0qIn7af19EhDTd/yCzfdD2su3l1dXVaf4UADDGROFu+0L1gv1rEfHNtPrs2nRL+n0urT8taXvfn1+Z1q0TEYcjYikilrZs2TJr+QEAQ0zybhlLulfSixHxxb67jko6kJYPSHq0b/1t6V0z10p6s2/6BgCwAJsm2OYPJP2JpOdsH0/r/krS5yU9bPt2Sa9KuiXd9y1JeyWtSPq5pE/MtcQAgLHGhntE/Ickj7j7hiHbh6Q7KpYLAFABn1AFgAIR7gBQIMIdAApEuANAgQh3ACgQ4Q4ABSLcAaBAhDsAFIhwB4ACEe4AUCDCHQAKRLgDQIEIdwAoEOEOIC8e9SW16Ee4A0CBCHcAKBDhDgAFKivcmYsDAEmlhDuhDgDrlBHu4xD+ADqmG+EOAB1DuGN+uEICWoNwB4ACEe44H2fgQPaKCncrmi4CALRCUeEOAOgh3AGgQIQ7ABSIcMd5eO0CyB/hDozDu4eQIcIdKAkHIiSEOwAUiHAHgAIR7gBQoCLCfcN3dzAHCaCDigh3AD28jRVrxoa77ftsn7N9sm/dXbZP2z6efvb23fdp2yu2X7L90boKDgAYbZIz969KunHI+r+PiN3p51uSZHuXpP2Sfjv9zT/YvmBehQUATGZsuEfEE5LemPDx9kl6MCJ+ERE/lLQi6ZoK5auMy1RUxWs6GKrlfV9lzv1O2yfStM1lad0Vkl7r2+ZUWnce2wdtL9teXl1drVAMAMCgWcP9HkkflLRb0hlJX5j2ASLicEQsRcTSli1bZiwGAGCYmcI9Is5GxDsR8UtJX9F7Uy+nJW3v2/TKtA5YvJZfNgN1mincbW/ru/kxSWvvpDkqab/ti2xfJWmnpKerFREA3sPraJPZNG4D2w9Iul7SZtunJH1W0vW2d0sKSa9I+lNJiojnbT8s6QVJb0u6IyLeqafoAIBRxoZ7RNw6ZPW9G2z/OUmfq1IoAEA1fEIVwzFfPRptgwwQ7gBQIMId3VbxLJwX99BWhDsAjJPhVBzhDgAFItwBYIwcp98Id3RPhpfYwLQIdwAoUCfCPcdLKgCoohPhDgBdQ7hjbrhCAtqDcAeQP14kPw/hjqE4CwfyRrgDwEYyvSog3AGgQIR7m2V6xgBkr4B9j3BHmQrYOdEOub7+RLijDIQ55ijXQO9HuANAgQj3FmvF2QNnxKPRNmixboc7OyfaiHGJOeh2uANAoQh3ACgQ4Q4ABSLc0U0V5rVb8UI3MAbhDgDz1JIXxAl3AHlrSZiuacuVHeGei4YGcFsGaue1LMAwoIX9Q7gDQIEIdwAoUHnh3sLLIzQjyyklxm+W2jjWygt3AADhjjK08cwJaBLhjk7iYIDSEe6lYu4W6DTCHc3jQIQKuAobbmy4277P9jnbJ/vWXW77Mdsvp9+XpfW2fbftFdsnbO+ps/AAgOEmOXP/qqQbB9YdknQsInZKOpZuS9JNknamn4OS7plPMQEA0xgb7hHxhKQ3Blbvk3QkLR+RdHPf+vuj50lJl9reNq/CAoAkpvImMOuc+9aIOJOWX5e0NS1fIem1vu1OpXXnsX3Q9rLt5dXV1RmLAQAYpvILqhER0vSvaETE4YhYioilLVu2VC0GSseZGjZgBWNkwKzhfnZtuiX9PpfWn5a0vW+7K9M6AMACzRruRyUdSMsHJD3at/629K6ZayW92Td9AwBYkE3jNrD9gKTrJW22fUrSZyV9XtLDtm+X9KqkW9Lm35K0V9KKpJ9L+kQNZQYAjDE23CPi1hF33TBk25B0R9VCAUCWbM3wEmQtOv0JVT7Z1mK8OPaeebVFQW061323oHbp1+lwB1qj0ICZqzFt1MqTtWFlXlBfE+5tx07fTnY7wwRICHe0EsG5Hu2BaRHuLTf3nbqFVwIEF20wiRzbqMkyE+5d1MKAz826nXZce7akvc8LmpaUC/Ug3AGgQIR7B818qdjgmV7jl+Qb1L3xsiEPC95/CPeOmWo6YaO/Bboqk+kswh0A6pQOBos+OepeuGdy1AVQkwVnQFNXvN0Ld7yLaZbFaKydOZHptHLCnYEMrMPBe7iq7ZJLu5YT7kDbcMLRXS3oe8Id67VgUAKorphwX7tUyuWSCS0wyYGMg113Vej7NuRQMeE+Kf6R7oDc26LF5W/DDt5ZdY2LFo+3QZ0Ld2DNJOFb/Dtd7KwCa1JTn8RNuO274yGDNiPcgUVocRhwhTGgxX01DcK9S3IdtLmWuwICF1V1MtzZcQrQwcDHYuWeE50M9+IRfBPLfQeuwopO1792De+HhDvWKXJn52B3fhvQJpXksJ8Q7mhOQwEzy38kmmpnXuQ7XdCsFvcB4Y6s5XAGVYsWh0qrdLidCHcAKFDZ4V7qUbuGD2c0obNn3Q0YbOvs2r7F43iUptu47HAvUYaDvJKS6ztL3Upujxo0HbBNItxzNm5HzykIciprzmjn85R6ACDcMzbXQVnqTt9AvSbql4rlGvoe9VL7cAFKDHjCHdUNC5WNgmZeIcR7t0ejLYbrULsQ7listp5Jd6AMmL+p+3WB459wLxiBUh6mYjApwr1wnQj4OcxfoyCMB0mEe3Ym/bKnRQ7QYc816vmnXd86JZwpl1AHjEW4Q1JG4SoRThVk1c+oZFOVP7b9iqS3JL0j6e2IWLJ9uaSHJO2Q9IqkWyLif6oVE61lSwQG0LqTjnmcuf9hROyOiKV0+5CkYxGxU9KxdBvALFoWGI2jPSZWx7TMPklH0vIRSTfX8BwAMLUuTUtVDfeQ9G3bz9g+mNZtjYgzafl1SVuH/aHtg7aXbS+vrq5WLEb5ujQogVy1aT+tNOcu6bqIOG37NyQ9Zvu/+u+MiLA9tLYRcVjSYUlaWlpqT4tgcgu4RLZCIS7FgWlVOnOPiNPp9zlJj0i6RtJZ29skKf0+V7WQmI82nVUAXbWo/XDmcLf9AduXrC1L+oikk5KOSjqQNjsg6dGqhURZOMgM4EXCibV57LStbFWmZbZKesS9gblJ0j9FxL/a/q6kh23fLulVSbdUL+Zs2tbYRakzkMa8vZKpmvEY+wNsKbrVJjOHe0T8QNLvDln/Y0k3VCkUAPTjYDU9PqFaEi7vO40ARD/CHQAKRLgDQIEId7RXidNMc64TUzEYhXAHGkZAow6EOyqpM5g6H3olXrlgYQh3ACgQ4V6Qpv/7EuaPdl6wgq6WCHcAReGA2EO4A0CBCHegpTgDRRWEOwAUiHBHkTjrRdcR7gBQIMIdQJG6fvVGuANAgQh3tE5Xzri6Us/WKugDS8MQ7kDLcRDALAh3AMXr4gGScC9QFwcygPUIdwCdVPpJEOEOAAUi3IGOKf2MtYqS2oZwx8wWtSOUtMOh2xY5lgl3jJbZ+4A5CADvIdw7jkBcLNobi9LdcM/srBTrWUFQov79OOOcKDPcJ+iQzgXDJIN0YJuFtFHGOw9QWY3jP/9wJxwm0sjBrMCDbK3lZSy3ztz6u4G+zT/c0Q7jBm+Ng3uqHXCjcjQcrrUcOLp2wOhafTdAuOduhumWhTxnnc9fQeuuFIa0TevKWIoWnoDU2ddFhrsVrQqUps11AE3Rrv39QJ8MN7erDkjK6MC4gL4sMtyLszYQ5jkgKjzWNDvQyG3rGtwLqtfY52/x9E8xMm7HRRyEuhPudraDYaOBcN59NddxokE54l03cw3PUXdXfY7+cTLNVcrA8Bpajr4NZinnu38z49VTiWYZj6PWzTp2Zm7emvsl+3DP5jJs3ioOjDqnAyZ57Jl3pFn7e9qD+7x2vBrabuxzNPGW1gZUqVepbdIv+3DHeo0P2qqhWNPZzNh2GTirnteHpPofY159M/g4jfd5JsZdTS1a3f1WW7jbvtH2S7ZXbB+q63lGPv+QHSD3nWDDoJjDIK3yiv68plw2fJxJ6zhi+mOS6a1sx0hLD6pFyayNagl32xdI+pKkmyTtknSr7V11PBe0mEE34XPUGY6TPna2AV1BF+s8qales5ricdre5nWduV8jaSUifhAR/yvpQUn7anquzlvEVckiBnLbd5ZJLOwqZ86PX0LbY71NNT3uFZJe67t9StLv9W9g+6Ckg+nmz2y/VOH5Nkv60Sx/2LIrrZnr0TKl1EMqpy5j69GyfWGU4vqjYrv/5qg76gr3sSLisKTD83gs28sRsTSPx2oS9WifUupCPdplEfWoa1rmtKTtfbevTOsAAAtQV7h/V9JO21fZfp+k/ZKO1vRcAIABtUzLRMTbtu+U9G+SLpB0X0Q8X8dzJXOZ3mkB6tE+pdSFerRL7fVwBK+SA0Bp+IQqABSIcAeAAmUd7k1/xUFVtl+x/Zzt47aX07rLbT9m++X0+7KmyznI9n22z9k+2bduaLndc3fqoxO29zRX8vVG1OMu26dTnxy3vbfvvk+nerxk+6PNlPp8trfbftz2C7aft/3JtD6rPtmgHjn2yfttP2372VSXv0nrr7L9VCrzQ+kNJ7J9Ubq9ku7fUbkQEZHlj3ov1P63pKslvU/Ss5J2NV2uKevwiqTNA+v+TtKhtHxI0t82Xc4h5f6wpD2STo4rt6S9kv5FkiVdK+mppss/ph53SfrLIdvuSmPsIklXpbF3QdN1SGXbJmlPWr5E0vdTebPqkw3qkWOfWNLFaflCSU+ltn5Y0v60/suS/iwt/7mkL6fl/ZIeqlqGnM/cS/2Kg32SjqTlI5JubrAsQ0XEE5LeGFg9qtz7JN0fPU9KutT2tsWUdGMj6jHKPkkPRsQvIuKHklbUG4ONi4gzEfG9tPyWpBfV+5R4Vn2yQT1GaXOfRET8LN28MP2EpD+S9PW0frBP1vrq65JusKt9djXncB/2FQcbDYQ2Cknftv1M+joGSdoaEWfS8uuStjZTtKmNKneO/XRnmq64r29aLIt6pMv5D6l3pphtnwzUQ8qwT2xfYPu4pHOSHlPvyuInEfF22qS/vO/WJd3/pqRfr/L8OYd7Ca6LiD3qfXvmHbY/3H9n9K7Rsnuvaq7lTu6R9EFJuyWdkfSFZoszOdsXS/qGpE9FxE/778upT4bUI8s+iYh3ImK3ep/Qv0bSby3y+XMO9+y/4iAiTqff5yQ9ot4AOLt2iZx+n2uuhFMZVe6s+ikizqad8peSvqL3LvNbXQ/bF6oXiF+LiG+m1dn1ybB65NonayLiJ5Iel/T76k2BrX14tL+879Yl3f9rkn5c5XlzDvesv+LA9gdsX7K2LOkjkk6qV4cDabMDkh5tpoRTG1Xuo5JuS+/QuFbSm31TBa0zMPf8MfX6ROrVY396V8NVknZKenrR5Rsmzc3eK+nFiPhi311Z9cmoemTaJ1tsX5qWf1XSH6v3GsLjkj6eNhvsk7W++rikf09XW7Nr+lXlKj/qver/ffXmsj7TdHmmLPvV6r3S/6yk59fKr9482zFJL0v6jqTLmy7rkLI/oN7l8f+pN294+6hyq/eugS+lPnpO0lLT5R9Tj39M5TyRdrhtfdt/JtXjJUk3NV3+vnJdp96UywlJx9PP3tz6ZIN65NgnvyPpP1OZT0r667T+avUOQCuS/lnSRWn9+9PtlXT/1VXLwNcPAECBcp6WAQCMQLgDQIEIdwAoEOEOAAUi3AGgQIQ7ABSIcAeAAv0/305fOGgMFeYAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Nm_M0CXUAsAn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# # save dataset as csv file\n",
        "# task_a_train_df.to_csv('coba_train_a', sep='\\t')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gFgYcYx08ULD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0nS8VAw9h6ru",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vwJSV9cfh9Q6",
        "colab_type": "text"
      },
      "source": [
        "# Pytorch"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D0KvskijQ9H9",
        "colab_type": "text"
      },
      "source": [
        "## Build Dataset\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bP7SH78Hh_Kp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from torch.utils.data import DataLoader, Dataset\n",
        "import csv\n",
        "\n",
        "# class TextDataset(Dataset):\n",
        "#   @staticmethod\n",
        "#   def sort_key(ex):\n",
        "#       return len(ex.text)\n",
        "\n",
        "#   def __init__(self, dataset_df):\n",
        "#     self.samples = []\n",
        "\n",
        "#     for idx, row in dataset_df.iterrows():\n",
        "#       if idx == 101:\n",
        "#         break\n",
        "#       self.samples.append( (row['text'], row['sentiment']) )\n",
        "\n",
        "#   def __len__(self):\n",
        "#     return len(self.samples)\n",
        "\n",
        "#   def __getitem__(self, idx):\n",
        "#     text, sentiment = self.samples[idx]\n",
        "#     # return self.transform(self.x_data[index]), self.transform(self.y_data[index])\n",
        "#     return (text, sentiment).ToTensor()\n",
        "\n",
        "  \n",
        "\n",
        "# task_a_trainset = TextDataset(task_a_train_df)\n",
        "# dataloader = DataLoader(\n",
        "#                 task_a_trainset,\n",
        "#                 batch_size=50,\n",
        "#                 num_workers=2\n",
        "#              )"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oiDdUbMpWPSO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# for i, batch in enumerate(dataloader):\n",
        "#   for sample in batch:\n",
        "#     print(batch)\n",
        "#   print(\">>>>>>>\")\n",
        "\n",
        "# task_a_trainset"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4NS6h7hmyQMX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from torchtext import data\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d4keeVLE2gS5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "task_a_train_df = task_a_train_df[['text', 'sentiment']]\n",
        "# task_a_train_df.to_csv('train_a.csv', sep='\\t', index=False)\n",
        "task_a_train_df.to_csv('train_a.csv', sep='\\t', index_label='row_num')\n",
        "\n",
        "task_a_test_df = task_a_test_df[['text', 'sentiment']]\n",
        "# task_a_test_df.to_csv('test_a.csv', sep='\\t', index=False)\n",
        "task_a_test_df.to_csv('test_a.csv', sep='\\t', index_label='row_num')\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OU4H9jAhUr6K",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gG8Y1k6YVos_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "9d136556-b820-4b5a-fa05-aece80056aef"
      },
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "from ekphrasis.classes.tokenizer import SocialTokenizer\n",
        "from ekphrasis.dicts.emoticons import emoticons\n",
        "from ekphrasis.classes.preprocessor import TextPreProcessor\n",
        "\n",
        "text_processor = TextPreProcessor(\n",
        "  # normalized these terms (ex: \"google.com\" into \"<url>\")\n",
        "  normalize = ['url', 'email', 'percent', 'money', 'phone', 'user',\n",
        "              'time', 'date', 'number'],\n",
        "\n",
        "  # annotate these terms (ex: \"#win\" into [\"<hashtag>\", \"win\", \"</hashtag>\"])\n",
        "  annotate = {'hashtag', 'allcaps', 'elongated', 'repeated', 'emphasis', 'censored'},\n",
        "  fix_html=True,\n",
        "  segmenter = 'twitter',\n",
        "  corrector='twitter',\n",
        "  unpack_hashtags=True,\n",
        "  unpack_contractions=True,\n",
        "  spell_correct_elong=False,\n",
        "  tokenizer = SocialTokenizer(lowercase=True).tokenize,\n",
        "  dicts = [emoticons]\n",
        ")\n",
        "\n",
        "def custom_tokenizer(example):\n",
        "  return text_processor.pre_process_doc(example)\n",
        "\n"
      ],
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Reading twitter - 1grams ...\n",
            "Reading twitter - 2grams ...\n",
            "Reading twitter - 1grams ...\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h-_FIEeLyTFM",
        "colab_type": "code",
        "outputId": "bf85ff62-3b39-4b99-b0f8-2fe70043472e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "ROW_NUM = data.Field()\n",
        "TEXT = data.Field(tokenize=custom_tokenizer, include_lengths=True)\n",
        "\n",
        "SENTIMENT = data.LabelField(dtype = torch.int)\n",
        "\n",
        "train_data_a = data.TabularDataset(\n",
        "    path='train_a.csv',\n",
        "    format='tsv',\n",
        "    fields = [('row_num', ROW_NUM), ('text', TEXT), ('sentiment', SENTIMENT)],\n",
        "    # fields = [('row_num', ROW_NUM), (None, None), ('sentiment', SENTIMENT), ('text', TEXT)],\n",
        "    skip_header=True\n",
        ")\n",
        "\n",
        "test_data_a = data.TabularDataset(\n",
        "    path='test_a.csv',\n",
        "    format='tsv',\n",
        "    fields = [('row_num', ROW_NUM), ('text', TEXT), ('sentiment', SENTIMENT)],\n",
        "    skip_header=True\n",
        ")\n",
        "\n",
        "\n",
        "train_data_a, valid_data_a = train_data_a.split()\n",
        "\n",
        "print(len(train_data_a))\n",
        "print(len(valid_data_a))\n",
        "print(len(test_data_a))\n"
      ],
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "35234\n",
            "15100\n",
            "12284\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1q0vTNHNiCmx",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YFx9ds1ozwiX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "outputId": "dc1f3c54-c507-4469-f90e-fe59457cbfb2"
      },
      "source": [
        "vars(train_data_a.examples[0])"
      ],
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'row_num': ['43984'],\n",
              " 'sentiment': 'neutral',\n",
              " 'text': ['does',\n",
              "  'anyone',\n",
              "  'know',\n",
              "  'where',\n",
              "  'i',\n",
              "  'can',\n",
              "  'get',\n",
              "  'ed',\n",
              "  'sheeran',\n",
              "  'tickets',\n",
              "  'for',\n",
              "  'the',\n",
              "  '2',\n",
              "  '0',\n",
              "  'th',\n",
              "  'of',\n",
              "  'september',\n",
              "  '?']}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c6jh0QGex2RN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "BATCH_SIZE = 64\n",
        "\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "\n",
        "train_iterator, valid_iterator, test_iterator = data.BucketIterator.splits(\n",
        "    (train_data_a, valid_data_a, test_data_a), \n",
        "    batch_sizes = (BATCH_SIZE, BATCH_SIZE, BATCH_SIZE),\n",
        "    sort_key=lambda x: len(x.text),\n",
        "    sort_within_batch = True,\n",
        "    device = device)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jGrJVM8w7MtP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6TBj6w9Lrzop",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b4RUkXWxqxGG",
        "colab_type": "text"
      },
      "source": [
        "## Build Vocabulary"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j0DnLh3PrH47",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "ROW_NUM.build_vocab(train_data_a)\n",
        "SENTIMENT.build_vocab(train_data_a)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sXGaBQzmrzyP",
        "colab_type": "code",
        "outputId": "8b5787e6-c689-4d08-ec60-cae6374f6019",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "print(SENTIMENT.vocab.freqs.most_common())\n",
        "for key, value in SENTIMENT.vocab.stoi.items():\n",
        "  print(key, value)\n",
        "\n",
        "print(ROW_NUM.vocab.freqs.most_common())\n",
        "for key, value in ROW_NUM.vocab.stoi.items():\n",
        "  print(key, value)"
      ],
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[1;30;43mStreaming output truncated to the last 5000 lines.\u001b[0m\n",
            "48815 30237\n",
            "48817 30238\n",
            "48818 30239\n",
            "48819 30240\n",
            "4882 30241\n",
            "48820 30242\n",
            "48821 30243\n",
            "48822 30244\n",
            "48823 30245\n",
            "48824 30246\n",
            "48825 30247\n",
            "48826 30248\n",
            "48827 30249\n",
            "48828 30250\n",
            "4883 30251\n",
            "48830 30252\n",
            "48832 30253\n",
            "48835 30254\n",
            "48837 30255\n",
            "48839 30256\n",
            "4884 30257\n",
            "48840 30258\n",
            "48841 30259\n",
            "48842 30260\n",
            "48843 30261\n",
            "48846 30262\n",
            "48847 30263\n",
            "48848 30264\n",
            "48849 30265\n",
            "4885 30266\n",
            "48850 30267\n",
            "48851 30268\n",
            "48852 30269\n",
            "48853 30270\n",
            "48855 30271\n",
            "48856 30272\n",
            "48857 30273\n",
            "4886 30274\n",
            "48860 30275\n",
            "48861 30276\n",
            "48862 30277\n",
            "48863 30278\n",
            "48864 30279\n",
            "48867 30280\n",
            "4887 30281\n",
            "48870 30282\n",
            "48871 30283\n",
            "48872 30284\n",
            "48874 30285\n",
            "48875 30286\n",
            "48876 30287\n",
            "48877 30288\n",
            "48878 30289\n",
            "48879 30290\n",
            "48880 30291\n",
            "48881 30292\n",
            "48882 30293\n",
            "48883 30294\n",
            "48884 30295\n",
            "48886 30296\n",
            "48887 30297\n",
            "48889 30298\n",
            "4889 30299\n",
            "48890 30300\n",
            "48891 30301\n",
            "48892 30302\n",
            "48893 30303\n",
            "48894 30304\n",
            "48895 30305\n",
            "48896 30306\n",
            "48897 30307\n",
            "48900 30308\n",
            "48901 30309\n",
            "48902 30310\n",
            "48903 30311\n",
            "48904 30312\n",
            "48906 30313\n",
            "48907 30314\n",
            "48909 30315\n",
            "48910 30316\n",
            "48911 30317\n",
            "48912 30318\n",
            "48914 30319\n",
            "48915 30320\n",
            "48916 30321\n",
            "48917 30322\n",
            "48918 30323\n",
            "48919 30324\n",
            "48921 30325\n",
            "48922 30326\n",
            "48923 30327\n",
            "48925 30328\n",
            "48926 30329\n",
            "48927 30330\n",
            "48928 30331\n",
            "48929 30332\n",
            "48930 30333\n",
            "48931 30334\n",
            "48932 30335\n",
            "48933 30336\n",
            "48934 30337\n",
            "48935 30338\n",
            "48937 30339\n",
            "48938 30340\n",
            "48943 30341\n",
            "48944 30342\n",
            "48945 30343\n",
            "48946 30344\n",
            "48947 30345\n",
            "48948 30346\n",
            "4895 30347\n",
            "48950 30348\n",
            "48952 30349\n",
            "48954 30350\n",
            "48957 30351\n",
            "48958 30352\n",
            "48959 30353\n",
            "4896 30354\n",
            "48960 30355\n",
            "48961 30356\n",
            "48964 30357\n",
            "48965 30358\n",
            "48966 30359\n",
            "48967 30360\n",
            "48971 30361\n",
            "48974 30362\n",
            "48975 30363\n",
            "48976 30364\n",
            "48977 30365\n",
            "48981 30366\n",
            "48983 30367\n",
            "48985 30368\n",
            "48986 30369\n",
            "48988 30370\n",
            "4899 30371\n",
            "48991 30372\n",
            "48992 30373\n",
            "48994 30374\n",
            "48995 30375\n",
            "48996 30376\n",
            "48999 30377\n",
            "49 30378\n",
            "490 30379\n",
            "4900 30380\n",
            "49000 30381\n",
            "49001 30382\n",
            "49002 30383\n",
            "49003 30384\n",
            "49004 30385\n",
            "49006 30386\n",
            "49007 30387\n",
            "49008 30388\n",
            "4901 30389\n",
            "49010 30390\n",
            "49011 30391\n",
            "49013 30392\n",
            "4902 30393\n",
            "49020 30394\n",
            "49021 30395\n",
            "49024 30396\n",
            "49025 30397\n",
            "49027 30398\n",
            "49029 30399\n",
            "4903 30400\n",
            "49030 30401\n",
            "49031 30402\n",
            "49032 30403\n",
            "49033 30404\n",
            "49034 30405\n",
            "49035 30406\n",
            "49036 30407\n",
            "49037 30408\n",
            "49038 30409\n",
            "49039 30410\n",
            "49040 30411\n",
            "49041 30412\n",
            "49042 30413\n",
            "49043 30414\n",
            "49044 30415\n",
            "49045 30416\n",
            "49046 30417\n",
            "49047 30418\n",
            "49049 30419\n",
            "49053 30420\n",
            "49054 30421\n",
            "49057 30422\n",
            "49058 30423\n",
            "49059 30424\n",
            "4906 30425\n",
            "49060 30426\n",
            "49061 30427\n",
            "49062 30428\n",
            "49063 30429\n",
            "49064 30430\n",
            "49065 30431\n",
            "49067 30432\n",
            "49069 30433\n",
            "4907 30434\n",
            "49070 30435\n",
            "49071 30436\n",
            "49074 30437\n",
            "49075 30438\n",
            "49076 30439\n",
            "49078 30440\n",
            "4908 30441\n",
            "49080 30442\n",
            "49081 30443\n",
            "49082 30444\n",
            "49084 30445\n",
            "49088 30446\n",
            "49089 30447\n",
            "4909 30448\n",
            "49090 30449\n",
            "49092 30450\n",
            "49093 30451\n",
            "49095 30452\n",
            "49098 30453\n",
            "49099 30454\n",
            "491 30455\n",
            "49101 30456\n",
            "49102 30457\n",
            "49104 30458\n",
            "49105 30459\n",
            "49107 30460\n",
            "49108 30461\n",
            "49109 30462\n",
            "4911 30463\n",
            "49110 30464\n",
            "49111 30465\n",
            "49113 30466\n",
            "49114 30467\n",
            "49116 30468\n",
            "49117 30469\n",
            "49118 30470\n",
            "49120 30471\n",
            "49121 30472\n",
            "49122 30473\n",
            "49123 30474\n",
            "49125 30475\n",
            "49128 30476\n",
            "4913 30477\n",
            "49130 30478\n",
            "49131 30479\n",
            "49132 30480\n",
            "49133 30481\n",
            "49136 30482\n",
            "49138 30483\n",
            "49139 30484\n",
            "4914 30485\n",
            "49140 30486\n",
            "49141 30487\n",
            "49142 30488\n",
            "49144 30489\n",
            "49145 30490\n",
            "49146 30491\n",
            "49149 30492\n",
            "49150 30493\n",
            "49151 30494\n",
            "49152 30495\n",
            "49153 30496\n",
            "49155 30497\n",
            "49156 30498\n",
            "49157 30499\n",
            "49159 30500\n",
            "49161 30501\n",
            "49162 30502\n",
            "49165 30503\n",
            "49166 30504\n",
            "49169 30505\n",
            "49171 30506\n",
            "49172 30507\n",
            "49173 30508\n",
            "49174 30509\n",
            "49175 30510\n",
            "49176 30511\n",
            "49179 30512\n",
            "49180 30513\n",
            "49183 30514\n",
            "49184 30515\n",
            "49185 30516\n",
            "49186 30517\n",
            "49187 30518\n",
            "49188 30519\n",
            "49189 30520\n",
            "49190 30521\n",
            "49193 30522\n",
            "49194 30523\n",
            "49195 30524\n",
            "49196 30525\n",
            "49197 30526\n",
            "49198 30527\n",
            "49199 30528\n",
            "492 30529\n",
            "4920 30530\n",
            "49200 30531\n",
            "49201 30532\n",
            "49203 30533\n",
            "49205 30534\n",
            "49206 30535\n",
            "49209 30536\n",
            "4921 30537\n",
            "49212 30538\n",
            "49214 30539\n",
            "49215 30540\n",
            "49216 30541\n",
            "49218 30542\n",
            "49219 30543\n",
            "4922 30544\n",
            "49220 30545\n",
            "49221 30546\n",
            "49222 30547\n",
            "49224 30548\n",
            "49225 30549\n",
            "49226 30550\n",
            "49227 30551\n",
            "49228 30552\n",
            "49229 30553\n",
            "4923 30554\n",
            "49230 30555\n",
            "49231 30556\n",
            "49233 30557\n",
            "49234 30558\n",
            "49235 30559\n",
            "49236 30560\n",
            "49237 30561\n",
            "49238 30562\n",
            "49239 30563\n",
            "49240 30564\n",
            "49243 30565\n",
            "49246 30566\n",
            "49249 30567\n",
            "4925 30568\n",
            "49250 30569\n",
            "49252 30570\n",
            "49258 30571\n",
            "49259 30572\n",
            "4926 30573\n",
            "49260 30574\n",
            "49261 30575\n",
            "49262 30576\n",
            "49263 30577\n",
            "49264 30578\n",
            "49265 30579\n",
            "49267 30580\n",
            "49268 30581\n",
            "49270 30582\n",
            "49272 30583\n",
            "49273 30584\n",
            "49274 30585\n",
            "49275 30586\n",
            "49276 30587\n",
            "49277 30588\n",
            "49278 30589\n",
            "4928 30590\n",
            "49282 30591\n",
            "49284 30592\n",
            "49285 30593\n",
            "49286 30594\n",
            "49289 30595\n",
            "4929 30596\n",
            "49290 30597\n",
            "49291 30598\n",
            "49292 30599\n",
            "49293 30600\n",
            "49296 30601\n",
            "49297 30602\n",
            "4930 30603\n",
            "49301 30604\n",
            "49302 30605\n",
            "49304 30606\n",
            "49305 30607\n",
            "49306 30608\n",
            "49307 30609\n",
            "49308 30610\n",
            "49310 30611\n",
            "49311 30612\n",
            "49313 30613\n",
            "49315 30614\n",
            "49316 30615\n",
            "49317 30616\n",
            "49318 30617\n",
            "4932 30618\n",
            "49321 30619\n",
            "49323 30620\n",
            "49324 30621\n",
            "49326 30622\n",
            "49327 30623\n",
            "49328 30624\n",
            "4933 30625\n",
            "49330 30626\n",
            "49331 30627\n",
            "49333 30628\n",
            "49335 30629\n",
            "49336 30630\n",
            "49338 30631\n",
            "49339 30632\n",
            "49342 30633\n",
            "49343 30634\n",
            "49344 30635\n",
            "49345 30636\n",
            "49347 30637\n",
            "49349 30638\n",
            "4935 30639\n",
            "49350 30640\n",
            "49353 30641\n",
            "49355 30642\n",
            "49357 30643\n",
            "49358 30644\n",
            "49359 30645\n",
            "49360 30646\n",
            "49361 30647\n",
            "49362 30648\n",
            "49363 30649\n",
            "49364 30650\n",
            "49365 30651\n",
            "49367 30652\n",
            "49369 30653\n",
            "4937 30654\n",
            "49370 30655\n",
            "49374 30656\n",
            "49375 30657\n",
            "49377 30658\n",
            "49378 30659\n",
            "49379 30660\n",
            "4938 30661\n",
            "49381 30662\n",
            "49382 30663\n",
            "49384 30664\n",
            "49387 30665\n",
            "49388 30666\n",
            "49389 30667\n",
            "49391 30668\n",
            "49393 30669\n",
            "49394 30670\n",
            "49396 30671\n",
            "49397 30672\n",
            "49398 30673\n",
            "494 30674\n",
            "4940 30675\n",
            "49400 30676\n",
            "49402 30677\n",
            "49403 30678\n",
            "49407 30679\n",
            "49408 30680\n",
            "4941 30681\n",
            "49413 30682\n",
            "49415 30683\n",
            "49417 30684\n",
            "49418 30685\n",
            "49419 30686\n",
            "4942 30687\n",
            "49420 30688\n",
            "49421 30689\n",
            "49423 30690\n",
            "49424 30691\n",
            "49425 30692\n",
            "49427 30693\n",
            "49428 30694\n",
            "49429 30695\n",
            "4943 30696\n",
            "49431 30697\n",
            "49432 30698\n",
            "49433 30699\n",
            "49435 30700\n",
            "49436 30701\n",
            "49438 30702\n",
            "49440 30703\n",
            "49441 30704\n",
            "49442 30705\n",
            "49443 30706\n",
            "49444 30707\n",
            "49446 30708\n",
            "49447 30709\n",
            "49448 30710\n",
            "49449 30711\n",
            "4945 30712\n",
            "49450 30713\n",
            "49451 30714\n",
            "49453 30715\n",
            "49454 30716\n",
            "49455 30717\n",
            "49457 30718\n",
            "49458 30719\n",
            "49459 30720\n",
            "49460 30721\n",
            "49461 30722\n",
            "49463 30723\n",
            "49465 30724\n",
            "49468 30725\n",
            "49469 30726\n",
            "49470 30727\n",
            "49471 30728\n",
            "49472 30729\n",
            "49473 30730\n",
            "49474 30731\n",
            "49475 30732\n",
            "49476 30733\n",
            "49477 30734\n",
            "49479 30735\n",
            "4948 30736\n",
            "49480 30737\n",
            "49482 30738\n",
            "49483 30739\n",
            "49486 30740\n",
            "49487 30741\n",
            "49489 30742\n",
            "4949 30743\n",
            "49492 30744\n",
            "49494 30745\n",
            "49496 30746\n",
            "49498 30747\n",
            "49499 30748\n",
            "495 30749\n",
            "4950 30750\n",
            "49500 30751\n",
            "49502 30752\n",
            "49505 30753\n",
            "49506 30754\n",
            "49507 30755\n",
            "49509 30756\n",
            "49512 30757\n",
            "49514 30758\n",
            "49518 30759\n",
            "49520 30760\n",
            "49521 30761\n",
            "49522 30762\n",
            "49523 30763\n",
            "49524 30764\n",
            "49525 30765\n",
            "49527 30766\n",
            "49528 30767\n",
            "49529 30768\n",
            "4953 30769\n",
            "49531 30770\n",
            "49532 30771\n",
            "49533 30772\n",
            "49534 30773\n",
            "49535 30774\n",
            "49536 30775\n",
            "49537 30776\n",
            "49538 30777\n",
            "49539 30778\n",
            "4954 30779\n",
            "49540 30780\n",
            "49541 30781\n",
            "49542 30782\n",
            "49544 30783\n",
            "49545 30784\n",
            "49546 30785\n",
            "49547 30786\n",
            "49548 30787\n",
            "4955 30788\n",
            "49550 30789\n",
            "49551 30790\n",
            "49552 30791\n",
            "49553 30792\n",
            "49554 30793\n",
            "49555 30794\n",
            "49556 30795\n",
            "49557 30796\n",
            "49558 30797\n",
            "49559 30798\n",
            "4956 30799\n",
            "49560 30800\n",
            "49562 30801\n",
            "49568 30802\n",
            "49569 30803\n",
            "4957 30804\n",
            "49570 30805\n",
            "49571 30806\n",
            "49573 30807\n",
            "49574 30808\n",
            "49575 30809\n",
            "49576 30810\n",
            "49577 30811\n",
            "49578 30812\n",
            "49579 30813\n",
            "4958 30814\n",
            "49580 30815\n",
            "49581 30816\n",
            "49582 30817\n",
            "49586 30818\n",
            "49587 30819\n",
            "49589 30820\n",
            "4959 30821\n",
            "49590 30822\n",
            "49592 30823\n",
            "49593 30824\n",
            "49594 30825\n",
            "49595 30826\n",
            "49597 30827\n",
            "496 30828\n",
            "49600 30829\n",
            "49601 30830\n",
            "49602 30831\n",
            "49603 30832\n",
            "49605 30833\n",
            "49606 30834\n",
            "49609 30835\n",
            "4961 30836\n",
            "49610 30837\n",
            "49611 30838\n",
            "49612 30839\n",
            "49614 30840\n",
            "49616 30841\n",
            "49617 30842\n",
            "49618 30843\n",
            "49619 30844\n",
            "4962 30845\n",
            "49620 30846\n",
            "49621 30847\n",
            "49622 30848\n",
            "49623 30849\n",
            "49624 30850\n",
            "49625 30851\n",
            "49626 30852\n",
            "49627 30853\n",
            "49628 30854\n",
            "49629 30855\n",
            "4963 30856\n",
            "49630 30857\n",
            "49631 30858\n",
            "49632 30859\n",
            "49637 30860\n",
            "4964 30861\n",
            "49640 30862\n",
            "49641 30863\n",
            "49643 30864\n",
            "49645 30865\n",
            "49646 30866\n",
            "49647 30867\n",
            "49648 30868\n",
            "49649 30869\n",
            "4965 30870\n",
            "49650 30871\n",
            "49651 30872\n",
            "49652 30873\n",
            "49653 30874\n",
            "49654 30875\n",
            "49656 30876\n",
            "49657 30877\n",
            "49660 30878\n",
            "49661 30879\n",
            "49664 30880\n",
            "49666 30881\n",
            "49667 30882\n",
            "49668 30883\n",
            "49670 30884\n",
            "49672 30885\n",
            "49673 30886\n",
            "49675 30887\n",
            "49676 30888\n",
            "49677 30889\n",
            "4968 30890\n",
            "49680 30891\n",
            "49681 30892\n",
            "49682 30893\n",
            "49683 30894\n",
            "49684 30895\n",
            "49686 30896\n",
            "49687 30897\n",
            "49688 30898\n",
            "49689 30899\n",
            "4969 30900\n",
            "49692 30901\n",
            "49693 30902\n",
            "49694 30903\n",
            "49697 30904\n",
            "497 30905\n",
            "4970 30906\n",
            "49700 30907\n",
            "49701 30908\n",
            "49703 30909\n",
            "49704 30910\n",
            "49706 30911\n",
            "49707 30912\n",
            "49708 30913\n",
            "4971 30914\n",
            "49710 30915\n",
            "49711 30916\n",
            "49712 30917\n",
            "49713 30918\n",
            "49714 30919\n",
            "49715 30920\n",
            "49716 30921\n",
            "49717 30922\n",
            "49718 30923\n",
            "49720 30924\n",
            "49724 30925\n",
            "49726 30926\n",
            "49728 30927\n",
            "49729 30928\n",
            "49730 30929\n",
            "49731 30930\n",
            "49733 30931\n",
            "49734 30932\n",
            "49736 30933\n",
            "49737 30934\n",
            "49738 30935\n",
            "4974 30936\n",
            "49740 30937\n",
            "49743 30938\n",
            "49744 30939\n",
            "49746 30940\n",
            "49747 30941\n",
            "49749 30942\n",
            "4975 30943\n",
            "49750 30944\n",
            "49751 30945\n",
            "49752 30946\n",
            "49754 30947\n",
            "49755 30948\n",
            "49756 30949\n",
            "49757 30950\n",
            "49758 30951\n",
            "49759 30952\n",
            "49760 30953\n",
            "49761 30954\n",
            "49762 30955\n",
            "49763 30956\n",
            "49765 30957\n",
            "49766 30958\n",
            "49767 30959\n",
            "49768 30960\n",
            "49770 30961\n",
            "49771 30962\n",
            "49772 30963\n",
            "49773 30964\n",
            "49774 30965\n",
            "49775 30966\n",
            "49776 30967\n",
            "49779 30968\n",
            "4978 30969\n",
            "49781 30970\n",
            "49782 30971\n",
            "49783 30972\n",
            "49786 30973\n",
            "49787 30974\n",
            "49788 30975\n",
            "4979 30976\n",
            "49790 30977\n",
            "49791 30978\n",
            "49794 30979\n",
            "49795 30980\n",
            "49796 30981\n",
            "49797 30982\n",
            "49798 30983\n",
            "49799 30984\n",
            "498 30985\n",
            "49800 30986\n",
            "49801 30987\n",
            "49803 30988\n",
            "49805 30989\n",
            "49808 30990\n",
            "49809 30991\n",
            "4981 30992\n",
            "49811 30993\n",
            "49812 30994\n",
            "49813 30995\n",
            "49814 30996\n",
            "49817 30997\n",
            "49818 30998\n",
            "49819 30999\n",
            "4982 31000\n",
            "49820 31001\n",
            "49821 31002\n",
            "49822 31003\n",
            "49823 31004\n",
            "49824 31005\n",
            "49825 31006\n",
            "49827 31007\n",
            "49828 31008\n",
            "49829 31009\n",
            "49830 31010\n",
            "49831 31011\n",
            "49832 31012\n",
            "49833 31013\n",
            "49834 31014\n",
            "49835 31015\n",
            "49836 31016\n",
            "49839 31017\n",
            "49840 31018\n",
            "49842 31019\n",
            "49843 31020\n",
            "49846 31021\n",
            "49847 31022\n",
            "49848 31023\n",
            "49849 31024\n",
            "49850 31025\n",
            "49851 31026\n",
            "49854 31027\n",
            "49855 31028\n",
            "49856 31029\n",
            "49857 31030\n",
            "49858 31031\n",
            "49859 31032\n",
            "49861 31033\n",
            "49862 31034\n",
            "49863 31035\n",
            "49864 31036\n",
            "49867 31037\n",
            "49869 31038\n",
            "4987 31039\n",
            "49871 31040\n",
            "49872 31041\n",
            "49873 31042\n",
            "49877 31043\n",
            "49879 31044\n",
            "4988 31045\n",
            "49880 31046\n",
            "49882 31047\n",
            "49883 31048\n",
            "49884 31049\n",
            "49885 31050\n",
            "49886 31051\n",
            "49887 31052\n",
            "49888 31053\n",
            "49889 31054\n",
            "4989 31055\n",
            "49890 31056\n",
            "49891 31057\n",
            "49892 31058\n",
            "49893 31059\n",
            "49894 31060\n",
            "49895 31061\n",
            "49896 31062\n",
            "499 31063\n",
            "49900 31064\n",
            "49901 31065\n",
            "49902 31066\n",
            "49903 31067\n",
            "49904 31068\n",
            "49905 31069\n",
            "49906 31070\n",
            "49907 31071\n",
            "49908 31072\n",
            "49909 31073\n",
            "49910 31074\n",
            "49911 31075\n",
            "49913 31076\n",
            "49914 31077\n",
            "49915 31078\n",
            "49916 31079\n",
            "49918 31080\n",
            "49919 31081\n",
            "49920 31082\n",
            "49923 31083\n",
            "49925 31084\n",
            "49926 31085\n",
            "49927 31086\n",
            "49928 31087\n",
            "49929 31088\n",
            "49930 31089\n",
            "49932 31090\n",
            "49934 31091\n",
            "49935 31092\n",
            "49936 31093\n",
            "49937 31094\n",
            "49939 31095\n",
            "4994 31096\n",
            "49940 31097\n",
            "49941 31098\n",
            "49942 31099\n",
            "49945 31100\n",
            "49946 31101\n",
            "49948 31102\n",
            "49949 31103\n",
            "49950 31104\n",
            "49952 31105\n",
            "49953 31106\n",
            "49956 31107\n",
            "49957 31108\n",
            "49958 31109\n",
            "49959 31110\n",
            "49960 31111\n",
            "49962 31112\n",
            "49963 31113\n",
            "49964 31114\n",
            "49965 31115\n",
            "49966 31116\n",
            "49967 31117\n",
            "49968 31118\n",
            "4997 31119\n",
            "49970 31120\n",
            "49972 31121\n",
            "49973 31122\n",
            "49974 31123\n",
            "49975 31124\n",
            "49976 31125\n",
            "49977 31126\n",
            "49978 31127\n",
            "49979 31128\n",
            "49983 31129\n",
            "49984 31130\n",
            "49985 31131\n",
            "49986 31132\n",
            "49988 31133\n",
            "49991 31134\n",
            "49995 31135\n",
            "49996 31136\n",
            "49997 31137\n",
            "49998 31138\n",
            "50 31139\n",
            "500 31140\n",
            "5000 31141\n",
            "50000 31142\n",
            "50001 31143\n",
            "50004 31144\n",
            "50005 31145\n",
            "50006 31146\n",
            "50007 31147\n",
            "50008 31148\n",
            "50009 31149\n",
            "5001 31150\n",
            "50011 31151\n",
            "50012 31152\n",
            "50013 31153\n",
            "50015 31154\n",
            "50018 31155\n",
            "50020 31156\n",
            "50021 31157\n",
            "50022 31158\n",
            "50023 31159\n",
            "50024 31160\n",
            "50025 31161\n",
            "50028 31162\n",
            "50029 31163\n",
            "5003 31164\n",
            "50030 31165\n",
            "50031 31166\n",
            "50032 31167\n",
            "50033 31168\n",
            "50034 31169\n",
            "50037 31170\n",
            "5004 31171\n",
            "50040 31172\n",
            "50041 31173\n",
            "50044 31174\n",
            "50045 31175\n",
            "50046 31176\n",
            "50049 31177\n",
            "5005 31178\n",
            "50050 31179\n",
            "50053 31180\n",
            "50055 31181\n",
            "50057 31182\n",
            "50058 31183\n",
            "50059 31184\n",
            "5006 31185\n",
            "50060 31186\n",
            "50061 31187\n",
            "50062 31188\n",
            "50065 31189\n",
            "50067 31190\n",
            "50068 31191\n",
            "50069 31192\n",
            "50070 31193\n",
            "50073 31194\n",
            "50078 31195\n",
            "5008 31196\n",
            "50080 31197\n",
            "50081 31198\n",
            "50082 31199\n",
            "50084 31200\n",
            "50085 31201\n",
            "50086 31202\n",
            "50089 31203\n",
            "5009 31204\n",
            "50090 31205\n",
            "50092 31206\n",
            "50093 31207\n",
            "50094 31208\n",
            "50096 31209\n",
            "50097 31210\n",
            "50098 31211\n",
            "50099 31212\n",
            "501 31213\n",
            "5010 31214\n",
            "50100 31215\n",
            "50101 31216\n",
            "50103 31217\n",
            "50104 31218\n",
            "50106 31219\n",
            "50107 31220\n",
            "50109 31221\n",
            "50110 31222\n",
            "50111 31223\n",
            "50112 31224\n",
            "50114 31225\n",
            "50115 31226\n",
            "50116 31227\n",
            "50117 31228\n",
            "50118 31229\n",
            "50119 31230\n",
            "50120 31231\n",
            "50122 31232\n",
            "50124 31233\n",
            "50126 31234\n",
            "50128 31235\n",
            "5013 31236\n",
            "50130 31237\n",
            "50131 31238\n",
            "50132 31239\n",
            "50133 31240\n",
            "50135 31241\n",
            "50137 31242\n",
            "5014 31243\n",
            "50141 31244\n",
            "50144 31245\n",
            "50147 31246\n",
            "50148 31247\n",
            "50149 31248\n",
            "5015 31249\n",
            "50151 31250\n",
            "50153 31251\n",
            "50154 31252\n",
            "50155 31253\n",
            "50156 31254\n",
            "50158 31255\n",
            "50162 31256\n",
            "50164 31257\n",
            "50165 31258\n",
            "50168 31259\n",
            "50169 31260\n",
            "5017 31261\n",
            "50174 31262\n",
            "50177 31263\n",
            "50180 31264\n",
            "50181 31265\n",
            "50182 31266\n",
            "50183 31267\n",
            "50184 31268\n",
            "50186 31269\n",
            "50189 31270\n",
            "50191 31271\n",
            "50192 31272\n",
            "50193 31273\n",
            "50194 31274\n",
            "50195 31275\n",
            "50196 31276\n",
            "50197 31277\n",
            "50198 31278\n",
            "50199 31279\n",
            "502 31280\n",
            "50200 31281\n",
            "50202 31282\n",
            "50203 31283\n",
            "50204 31284\n",
            "50205 31285\n",
            "50206 31286\n",
            "50208 31287\n",
            "5021 31288\n",
            "50210 31289\n",
            "50212 31290\n",
            "50214 31291\n",
            "50215 31292\n",
            "50217 31293\n",
            "50218 31294\n",
            "50219 31295\n",
            "5022 31296\n",
            "50220 31297\n",
            "50221 31298\n",
            "50223 31299\n",
            "50224 31300\n",
            "50225 31301\n",
            "50227 31302\n",
            "50228 31303\n",
            "50229 31304\n",
            "5023 31305\n",
            "50230 31306\n",
            "50233 31307\n",
            "50236 31308\n",
            "50237 31309\n",
            "50238 31310\n",
            "50242 31311\n",
            "50243 31312\n",
            "50244 31313\n",
            "50248 31314\n",
            "50249 31315\n",
            "50250 31316\n",
            "50251 31317\n",
            "50253 31318\n",
            "50254 31319\n",
            "50255 31320\n",
            "50256 31321\n",
            "50258 31322\n",
            "50259 31323\n",
            "50260 31324\n",
            "50264 31325\n",
            "50265 31326\n",
            "50266 31327\n",
            "50267 31328\n",
            "50269 31329\n",
            "50270 31330\n",
            "50272 31331\n",
            "50274 31332\n",
            "50275 31333\n",
            "50276 31334\n",
            "50277 31335\n",
            "50278 31336\n",
            "5028 31337\n",
            "50280 31338\n",
            "50281 31339\n",
            "50282 31340\n",
            "50283 31341\n",
            "50285 31342\n",
            "50286 31343\n",
            "50288 31344\n",
            "5029 31345\n",
            "50290 31346\n",
            "50293 31347\n",
            "50294 31348\n",
            "50296 31349\n",
            "50298 31350\n",
            "50299 31351\n",
            "503 31352\n",
            "5030 31353\n",
            "50300 31354\n",
            "50303 31355\n",
            "50305 31356\n",
            "50306 31357\n",
            "50307 31358\n",
            "50308 31359\n",
            "50309 31360\n",
            "5031 31361\n",
            "50310 31362\n",
            "50312 31363\n",
            "50313 31364\n",
            "50314 31365\n",
            "50315 31366\n",
            "50316 31367\n",
            "50317 31368\n",
            "50318 31369\n",
            "5032 31370\n",
            "50322 31371\n",
            "50323 31372\n",
            "50324 31373\n",
            "50325 31374\n",
            "50327 31375\n",
            "50328 31376\n",
            "5033 31377\n",
            "50330 31378\n",
            "50332 31379\n",
            "50333 31380\n",
            "5035 31381\n",
            "5039 31382\n",
            "504 31383\n",
            "5040 31384\n",
            "5041 31385\n",
            "5042 31386\n",
            "5043 31387\n",
            "5044 31388\n",
            "5045 31389\n",
            "5046 31390\n",
            "5047 31391\n",
            "5049 31392\n",
            "505 31393\n",
            "5050 31394\n",
            "5051 31395\n",
            "5053 31396\n",
            "5054 31397\n",
            "5055 31398\n",
            "5057 31399\n",
            "5058 31400\n",
            "5059 31401\n",
            "506 31402\n",
            "5060 31403\n",
            "5062 31404\n",
            "5063 31405\n",
            "5064 31406\n",
            "5066 31407\n",
            "5068 31408\n",
            "5069 31409\n",
            "507 31410\n",
            "5072 31411\n",
            "5074 31412\n",
            "5075 31413\n",
            "5076 31414\n",
            "5077 31415\n",
            "5078 31416\n",
            "5079 31417\n",
            "5080 31418\n",
            "5081 31419\n",
            "5086 31420\n",
            "5087 31421\n",
            "5088 31422\n",
            "5089 31423\n",
            "509 31424\n",
            "5090 31425\n",
            "5092 31426\n",
            "5093 31427\n",
            "5094 31428\n",
            "5095 31429\n",
            "5096 31430\n",
            "5097 31431\n",
            "5098 31432\n",
            "51 31433\n",
            "510 31434\n",
            "5100 31435\n",
            "5101 31436\n",
            "5103 31437\n",
            "5104 31438\n",
            "5105 31439\n",
            "5106 31440\n",
            "5108 31441\n",
            "511 31442\n",
            "5110 31443\n",
            "5111 31444\n",
            "5112 31445\n",
            "5115 31446\n",
            "5116 31447\n",
            "5117 31448\n",
            "5118 31449\n",
            "5119 31450\n",
            "512 31451\n",
            "5123 31452\n",
            "5125 31453\n",
            "5129 31454\n",
            "513 31455\n",
            "5130 31456\n",
            "5131 31457\n",
            "5133 31458\n",
            "5135 31459\n",
            "5137 31460\n",
            "5138 31461\n",
            "5139 31462\n",
            "5141 31463\n",
            "5142 31464\n",
            "5143 31465\n",
            "5145 31466\n",
            "5146 31467\n",
            "5148 31468\n",
            "5150 31469\n",
            "5151 31470\n",
            "5153 31471\n",
            "5154 31472\n",
            "5156 31473\n",
            "5158 31474\n",
            "5159 31475\n",
            "516 31476\n",
            "5160 31477\n",
            "5165 31478\n",
            "5166 31479\n",
            "5167 31480\n",
            "5168 31481\n",
            "517 31482\n",
            "5170 31483\n",
            "5172 31484\n",
            "5173 31485\n",
            "5174 31486\n",
            "5176 31487\n",
            "5177 31488\n",
            "5178 31489\n",
            "5179 31490\n",
            "518 31491\n",
            "5180 31492\n",
            "5181 31493\n",
            "5185 31494\n",
            "5186 31495\n",
            "5187 31496\n",
            "5188 31497\n",
            "5189 31498\n",
            "5190 31499\n",
            "5191 31500\n",
            "5193 31501\n",
            "5194 31502\n",
            "5195 31503\n",
            "5196 31504\n",
            "5197 31505\n",
            "5198 31506\n",
            "5199 31507\n",
            "52 31508\n",
            "520 31509\n",
            "5200 31510\n",
            "5201 31511\n",
            "5202 31512\n",
            "5204 31513\n",
            "5205 31514\n",
            "5206 31515\n",
            "5207 31516\n",
            "5209 31517\n",
            "5210 31518\n",
            "5213 31519\n",
            "5215 31520\n",
            "5216 31521\n",
            "5218 31522\n",
            "5219 31523\n",
            "522 31524\n",
            "5225 31525\n",
            "5226 31526\n",
            "5228 31527\n",
            "5229 31528\n",
            "5230 31529\n",
            "5233 31530\n",
            "5235 31531\n",
            "5236 31532\n",
            "5237 31533\n",
            "5238 31534\n",
            "5239 31535\n",
            "524 31536\n",
            "5240 31537\n",
            "5241 31538\n",
            "5242 31539\n",
            "5243 31540\n",
            "5244 31541\n",
            "5245 31542\n",
            "5247 31543\n",
            "5248 31544\n",
            "5249 31545\n",
            "525 31546\n",
            "5250 31547\n",
            "5251 31548\n",
            "5253 31549\n",
            "5255 31550\n",
            "5256 31551\n",
            "5258 31552\n",
            "5259 31553\n",
            "526 31554\n",
            "5260 31555\n",
            "5261 31556\n",
            "5262 31557\n",
            "5263 31558\n",
            "5264 31559\n",
            "5265 31560\n",
            "5267 31561\n",
            "5268 31562\n",
            "5269 31563\n",
            "5270 31564\n",
            "5271 31565\n",
            "5272 31566\n",
            "5273 31567\n",
            "5276 31568\n",
            "5278 31569\n",
            "5279 31570\n",
            "528 31571\n",
            "5280 31572\n",
            "5282 31573\n",
            "5283 31574\n",
            "5284 31575\n",
            "5285 31576\n",
            "5286 31577\n",
            "5287 31578\n",
            "529 31579\n",
            "5292 31580\n",
            "5293 31581\n",
            "5294 31582\n",
            "5295 31583\n",
            "5296 31584\n",
            "5297 31585\n",
            "5299 31586\n",
            "53 31587\n",
            "5300 31588\n",
            "5303 31589\n",
            "5304 31590\n",
            "5305 31591\n",
            "5306 31592\n",
            "5307 31593\n",
            "5308 31594\n",
            "531 31595\n",
            "5311 31596\n",
            "5312 31597\n",
            "5314 31598\n",
            "5315 31599\n",
            "5316 31600\n",
            "5317 31601\n",
            "5318 31602\n",
            "5319 31603\n",
            "5321 31604\n",
            "5322 31605\n",
            "5323 31606\n",
            "5324 31607\n",
            "5326 31608\n",
            "533 31609\n",
            "5330 31610\n",
            "5331 31611\n",
            "5332 31612\n",
            "5334 31613\n",
            "5336 31614\n",
            "5337 31615\n",
            "5338 31616\n",
            "5339 31617\n",
            "5340 31618\n",
            "5341 31619\n",
            "5343 31620\n",
            "5346 31621\n",
            "5347 31622\n",
            "5348 31623\n",
            "5349 31624\n",
            "535 31625\n",
            "5350 31626\n",
            "5352 31627\n",
            "5353 31628\n",
            "5355 31629\n",
            "5356 31630\n",
            "5357 31631\n",
            "5359 31632\n",
            "536 31633\n",
            "5360 31634\n",
            "5361 31635\n",
            "5362 31636\n",
            "5363 31637\n",
            "5364 31638\n",
            "5365 31639\n",
            "5366 31640\n",
            "5368 31641\n",
            "537 31642\n",
            "5373 31643\n",
            "5374 31644\n",
            "5376 31645\n",
            "5377 31646\n",
            "5378 31647\n",
            "5379 31648\n",
            "538 31649\n",
            "5380 31650\n",
            "5381 31651\n",
            "5382 31652\n",
            "5384 31653\n",
            "5385 31654\n",
            "5386 31655\n",
            "5387 31656\n",
            "5388 31657\n",
            "539 31658\n",
            "5390 31659\n",
            "5391 31660\n",
            "5394 31661\n",
            "5395 31662\n",
            "5396 31663\n",
            "5397 31664\n",
            "5398 31665\n",
            "5399 31666\n",
            "54 31667\n",
            "540 31668\n",
            "5401 31669\n",
            "5402 31670\n",
            "5403 31671\n",
            "5404 31672\n",
            "5405 31673\n",
            "5406 31674\n",
            "5408 31675\n",
            "5409 31676\n",
            "5410 31677\n",
            "5411 31678\n",
            "5412 31679\n",
            "5414 31680\n",
            "5420 31681\n",
            "5421 31682\n",
            "5422 31683\n",
            "5423 31684\n",
            "5424 31685\n",
            "5425 31686\n",
            "5427 31687\n",
            "5428 31688\n",
            "543 31689\n",
            "5430 31690\n",
            "5433 31691\n",
            "5435 31692\n",
            "5436 31693\n",
            "5437 31694\n",
            "5439 31695\n",
            "544 31696\n",
            "5440 31697\n",
            "5441 31698\n",
            "5442 31699\n",
            "5443 31700\n",
            "5444 31701\n",
            "5446 31702\n",
            "5449 31703\n",
            "545 31704\n",
            "5450 31705\n",
            "5452 31706\n",
            "5454 31707\n",
            "5455 31708\n",
            "5456 31709\n",
            "5458 31710\n",
            "546 31711\n",
            "5461 31712\n",
            "5462 31713\n",
            "5464 31714\n",
            "5465 31715\n",
            "5467 31716\n",
            "5468 31717\n",
            "5470 31718\n",
            "5471 31719\n",
            "5472 31720\n",
            "5475 31721\n",
            "5476 31722\n",
            "5477 31723\n",
            "5478 31724\n",
            "5479 31725\n",
            "548 31726\n",
            "5480 31727\n",
            "5481 31728\n",
            "5482 31729\n",
            "5483 31730\n",
            "5484 31731\n",
            "5485 31732\n",
            "5486 31733\n",
            "5489 31734\n",
            "5490 31735\n",
            "5492 31736\n",
            "5493 31737\n",
            "5494 31738\n",
            "5495 31739\n",
            "5496 31740\n",
            "5497 31741\n",
            "5498 31742\n",
            "5499 31743\n",
            "55 31744\n",
            "550 31745\n",
            "5500 31746\n",
            "5501 31747\n",
            "5502 31748\n",
            "5504 31749\n",
            "5505 31750\n",
            "5507 31751\n",
            "5508 31752\n",
            "5509 31753\n",
            "551 31754\n",
            "5510 31755\n",
            "5512 31756\n",
            "5514 31757\n",
            "5515 31758\n",
            "5519 31759\n",
            "552 31760\n",
            "5522 31761\n",
            "5523 31762\n",
            "5524 31763\n",
            "5525 31764\n",
            "5526 31765\n",
            "5527 31766\n",
            "5528 31767\n",
            "5529 31768\n",
            "5533 31769\n",
            "5534 31770\n",
            "5535 31771\n",
            "5537 31772\n",
            "5540 31773\n",
            "5542 31774\n",
            "5543 31775\n",
            "5544 31776\n",
            "5545 31777\n",
            "5547 31778\n",
            "5548 31779\n",
            "5549 31780\n",
            "555 31781\n",
            "5550 31782\n",
            "5552 31783\n",
            "5553 31784\n",
            "5554 31785\n",
            "5556 31786\n",
            "5557 31787\n",
            "5559 31788\n",
            "5560 31789\n",
            "5562 31790\n",
            "5563 31791\n",
            "5565 31792\n",
            "5566 31793\n",
            "5569 31794\n",
            "557 31795\n",
            "5570 31796\n",
            "5571 31797\n",
            "5572 31798\n",
            "5575 31799\n",
            "5576 31800\n",
            "5577 31801\n",
            "5579 31802\n",
            "558 31803\n",
            "5583 31804\n",
            "5586 31805\n",
            "5588 31806\n",
            "559 31807\n",
            "5590 31808\n",
            "5591 31809\n",
            "5592 31810\n",
            "5593 31811\n",
            "5596 31812\n",
            "5599 31813\n",
            "56 31814\n",
            "5600 31815\n",
            "5601 31816\n",
            "5603 31817\n",
            "5604 31818\n",
            "5605 31819\n",
            "5606 31820\n",
            "5608 31821\n",
            "561 31822\n",
            "5610 31823\n",
            "5611 31824\n",
            "5612 31825\n",
            "5613 31826\n",
            "5614 31827\n",
            "5616 31828\n",
            "5618 31829\n",
            "5620 31830\n",
            "5621 31831\n",
            "5623 31832\n",
            "5625 31833\n",
            "5626 31834\n",
            "5627 31835\n",
            "5628 31836\n",
            "563 31837\n",
            "5630 31838\n",
            "5632 31839\n",
            "5633 31840\n",
            "5634 31841\n",
            "5635 31842\n",
            "5636 31843\n",
            "5638 31844\n",
            "5640 31845\n",
            "5641 31846\n",
            "5643 31847\n",
            "5644 31848\n",
            "5645 31849\n",
            "5646 31850\n",
            "5647 31851\n",
            "5648 31852\n",
            "5650 31853\n",
            "5651 31854\n",
            "5652 31855\n",
            "5653 31856\n",
            "5654 31857\n",
            "5655 31858\n",
            "5657 31859\n",
            "5659 31860\n",
            "566 31861\n",
            "5660 31862\n",
            "5661 31863\n",
            "5663 31864\n",
            "5664 31865\n",
            "5665 31866\n",
            "5667 31867\n",
            "5668 31868\n",
            "567 31869\n",
            "5670 31870\n",
            "5672 31871\n",
            "5673 31872\n",
            "5674 31873\n",
            "5675 31874\n",
            "5676 31875\n",
            "5677 31876\n",
            "5678 31877\n",
            "5679 31878\n",
            "568 31879\n",
            "5681 31880\n",
            "5682 31881\n",
            "5683 31882\n",
            "5684 31883\n",
            "5685 31884\n",
            "5687 31885\n",
            "5688 31886\n",
            "5689 31887\n",
            "5690 31888\n",
            "5691 31889\n",
            "5692 31890\n",
            "5693 31891\n",
            "5694 31892\n",
            "5695 31893\n",
            "5696 31894\n",
            "5698 31895\n",
            "5699 31896\n",
            "5700 31897\n",
            "5703 31898\n",
            "5704 31899\n",
            "5705 31900\n",
            "5706 31901\n",
            "5707 31902\n",
            "5708 31903\n",
            "5709 31904\n",
            "5710 31905\n",
            "5711 31906\n",
            "5713 31907\n",
            "5715 31908\n",
            "5718 31909\n",
            "5719 31910\n",
            "572 31911\n",
            "5720 31912\n",
            "5721 31913\n",
            "5722 31914\n",
            "5724 31915\n",
            "5725 31916\n",
            "5726 31917\n",
            "5727 31918\n",
            "5728 31919\n",
            "5729 31920\n",
            "573 31921\n",
            "5730 31922\n",
            "5732 31923\n",
            "5733 31924\n",
            "5734 31925\n",
            "5735 31926\n",
            "5738 31927\n",
            "5739 31928\n",
            "5740 31929\n",
            "5741 31930\n",
            "5742 31931\n",
            "5744 31932\n",
            "5745 31933\n",
            "5746 31934\n",
            "5747 31935\n",
            "575 31936\n",
            "5750 31937\n",
            "5751 31938\n",
            "5756 31939\n",
            "5757 31940\n",
            "5758 31941\n",
            "5760 31942\n",
            "5761 31943\n",
            "5764 31944\n",
            "5765 31945\n",
            "5766 31946\n",
            "5767 31947\n",
            "5768 31948\n",
            "577 31949\n",
            "5770 31950\n",
            "5773 31951\n",
            "5774 31952\n",
            "5775 31953\n",
            "5778 31954\n",
            "5779 31955\n",
            "578 31956\n",
            "5780 31957\n",
            "5781 31958\n",
            "5783 31959\n",
            "5784 31960\n",
            "5785 31961\n",
            "5786 31962\n",
            "5787 31963\n",
            "5788 31964\n",
            "5789 31965\n",
            "579 31966\n",
            "5790 31967\n",
            "5791 31968\n",
            "5792 31969\n",
            "5794 31970\n",
            "5795 31971\n",
            "5796 31972\n",
            "5797 31973\n",
            "58 31974\n",
            "5801 31975\n",
            "5802 31976\n",
            "5804 31977\n",
            "5806 31978\n",
            "5807 31979\n",
            "5809 31980\n",
            "581 31981\n",
            "5810 31982\n",
            "5811 31983\n",
            "5814 31984\n",
            "5815 31985\n",
            "5816 31986\n",
            "5817 31987\n",
            "5819 31988\n",
            "582 31989\n",
            "5820 31990\n",
            "5821 31991\n",
            "5823 31992\n",
            "5824 31993\n",
            "5825 31994\n",
            "5826 31995\n",
            "5828 31996\n",
            "5829 31997\n",
            "583 31998\n",
            "5830 31999\n",
            "5834 32000\n",
            "5835 32001\n",
            "5836 32002\n",
            "5837 32003\n",
            "5839 32004\n",
            "584 32005\n",
            "5840 32006\n",
            "5842 32007\n",
            "5845 32008\n",
            "5848 32009\n",
            "5849 32010\n",
            "585 32011\n",
            "5850 32012\n",
            "5852 32013\n",
            "5853 32014\n",
            "5855 32015\n",
            "5856 32016\n",
            "5857 32017\n",
            "5858 32018\n",
            "586 32019\n",
            "5860 32020\n",
            "5861 32021\n",
            "5863 32022\n",
            "5864 32023\n",
            "5865 32024\n",
            "5866 32025\n",
            "5868 32026\n",
            "587 32027\n",
            "5871 32028\n",
            "5872 32029\n",
            "5874 32030\n",
            "5876 32031\n",
            "5877 32032\n",
            "5878 32033\n",
            "588 32034\n",
            "5880 32035\n",
            "5881 32036\n",
            "5884 32037\n",
            "5885 32038\n",
            "5887 32039\n",
            "5889 32040\n",
            "5890 32041\n",
            "5891 32042\n",
            "5892 32043\n",
            "5893 32044\n",
            "5894 32045\n",
            "5896 32046\n",
            "5897 32047\n",
            "5898 32048\n",
            "5899 32049\n",
            "59 32050\n",
            "5901 32051\n",
            "5902 32052\n",
            "5904 32053\n",
            "5905 32054\n",
            "5906 32055\n",
            "5907 32056\n",
            "591 32057\n",
            "5910 32058\n",
            "5911 32059\n",
            "5912 32060\n",
            "5913 32061\n",
            "5915 32062\n",
            "5916 32063\n",
            "5917 32064\n",
            "5918 32065\n",
            "5919 32066\n",
            "592 32067\n",
            "5920 32068\n",
            "5923 32069\n",
            "5924 32070\n",
            "5925 32071\n",
            "5927 32072\n",
            "5929 32073\n",
            "5930 32074\n",
            "5933 32075\n",
            "5934 32076\n",
            "5935 32077\n",
            "5936 32078\n",
            "5939 32079\n",
            "5940 32080\n",
            "5941 32081\n",
            "5942 32082\n",
            "5943 32083\n",
            "5946 32084\n",
            "5947 32085\n",
            "5949 32086\n",
            "5950 32087\n",
            "5951 32088\n",
            "5952 32089\n",
            "5953 32090\n",
            "5954 32091\n",
            "5955 32092\n",
            "5957 32093\n",
            "5958 32094\n",
            "5959 32095\n",
            "5960 32096\n",
            "5961 32097\n",
            "5962 32098\n",
            "5963 32099\n",
            "5964 32100\n",
            "5966 32101\n",
            "5968 32102\n",
            "5969 32103\n",
            "597 32104\n",
            "5971 32105\n",
            "5972 32106\n",
            "5973 32107\n",
            "5974 32108\n",
            "5975 32109\n",
            "5977 32110\n",
            "5980 32111\n",
            "5981 32112\n",
            "5982 32113\n",
            "5983 32114\n",
            "5985 32115\n",
            "5986 32116\n",
            "5989 32117\n",
            "599 32118\n",
            "5991 32119\n",
            "5992 32120\n",
            "5993 32121\n",
            "5994 32122\n",
            "5995 32123\n",
            "5996 32124\n",
            "5998 32125\n",
            "5999 32126\n",
            "6002 32127\n",
            "6003 32128\n",
            "6004 32129\n",
            "6006 32130\n",
            "6007 32131\n",
            "6008 32132\n",
            "6011 32133\n",
            "6013 32134\n",
            "6014 32135\n",
            "6016 32136\n",
            "6017 32137\n",
            "6018 32138\n",
            "6020 32139\n",
            "6021 32140\n",
            "6022 32141\n",
            "6023 32142\n",
            "6024 32143\n",
            "6025 32144\n",
            "6026 32145\n",
            "6027 32146\n",
            "6029 32147\n",
            "6030 32148\n",
            "6031 32149\n",
            "6032 32150\n",
            "6033 32151\n",
            "6036 32152\n",
            "6037 32153\n",
            "6038 32154\n",
            "6039 32155\n",
            "604 32156\n",
            "6040 32157\n",
            "6043 32158\n",
            "6044 32159\n",
            "6045 32160\n",
            "6046 32161\n",
            "6047 32162\n",
            "6048 32163\n",
            "605 32164\n",
            "6050 32165\n",
            "6051 32166\n",
            "6052 32167\n",
            "6053 32168\n",
            "6056 32169\n",
            "6058 32170\n",
            "606 32171\n",
            "6060 32172\n",
            "6061 32173\n",
            "6063 32174\n",
            "6064 32175\n",
            "6065 32176\n",
            "6066 32177\n",
            "6067 32178\n",
            "6069 32179\n",
            "607 32180\n",
            "6071 32181\n",
            "6072 32182\n",
            "6073 32183\n",
            "6075 32184\n",
            "6076 32185\n",
            "6078 32186\n",
            "6079 32187\n",
            "608 32188\n",
            "6081 32189\n",
            "6083 32190\n",
            "6085 32191\n",
            "6086 32192\n",
            "6087 32193\n",
            "6089 32194\n",
            "609 32195\n",
            "6090 32196\n",
            "6091 32197\n",
            "6092 32198\n",
            "6093 32199\n",
            "6094 32200\n",
            "6095 32201\n",
            "6096 32202\n",
            "6097 32203\n",
            "6099 32204\n",
            "61 32205\n",
            "6100 32206\n",
            "6101 32207\n",
            "6103 32208\n",
            "6104 32209\n",
            "6105 32210\n",
            "6106 32211\n",
            "6109 32212\n",
            "611 32213\n",
            "6110 32214\n",
            "6112 32215\n",
            "6113 32216\n",
            "6116 32217\n",
            "6117 32218\n",
            "612 32219\n",
            "6120 32220\n",
            "6121 32221\n",
            "6123 32222\n",
            "6125 32223\n",
            "6126 32224\n",
            "6127 32225\n",
            "6128 32226\n",
            "613 32227\n",
            "6131 32228\n",
            "6132 32229\n",
            "6133 32230\n",
            "6134 32231\n",
            "6135 32232\n",
            "6137 32233\n",
            "6139 32234\n",
            "614 32235\n",
            "6140 32236\n",
            "6142 32237\n",
            "6143 32238\n",
            "6144 32239\n",
            "6145 32240\n",
            "6147 32241\n",
            "6149 32242\n",
            "6150 32243\n",
            "6153 32244\n",
            "6154 32245\n",
            "6155 32246\n",
            "6156 32247\n",
            "6158 32248\n",
            "6161 32249\n",
            "6162 32250\n",
            "6163 32251\n",
            "6164 32252\n",
            "6165 32253\n",
            "6166 32254\n",
            "6167 32255\n",
            "6169 32256\n",
            "6170 32257\n",
            "6171 32258\n",
            "6172 32259\n",
            "6173 32260\n",
            "6174 32261\n",
            "6176 32262\n",
            "6178 32263\n",
            "6179 32264\n",
            "618 32265\n",
            "6180 32266\n",
            "6182 32267\n",
            "6185 32268\n",
            "6187 32269\n",
            "6189 32270\n",
            "619 32271\n",
            "6190 32272\n",
            "6191 32273\n",
            "6192 32274\n",
            "6193 32275\n",
            "6194 32276\n",
            "6195 32277\n",
            "6197 32278\n",
            "6198 32279\n",
            "6200 32280\n",
            "6201 32281\n",
            "6202 32282\n",
            "6203 32283\n",
            "6204 32284\n",
            "6205 32285\n",
            "6206 32286\n",
            "6207 32287\n",
            "6208 32288\n",
            "621 32289\n",
            "6210 32290\n",
            "6211 32291\n",
            "6212 32292\n",
            "6213 32293\n",
            "6214 32294\n",
            "6215 32295\n",
            "6216 32296\n",
            "6218 32297\n",
            "6220 32298\n",
            "6221 32299\n",
            "6222 32300\n",
            "6223 32301\n",
            "6224 32302\n",
            "6225 32303\n",
            "6227 32304\n",
            "6228 32305\n",
            "6229 32306\n",
            "623 32307\n",
            "6230 32308\n",
            "6231 32309\n",
            "6232 32310\n",
            "6233 32311\n",
            "6234 32312\n",
            "6237 32313\n",
            "6238 32314\n",
            "6239 32315\n",
            "624 32316\n",
            "6240 32317\n",
            "6241 32318\n",
            "6242 32319\n",
            "6243 32320\n",
            "6244 32321\n",
            "6245 32322\n",
            "6246 32323\n",
            "6248 32324\n",
            "6249 32325\n",
            "625 32326\n",
            "6250 32327\n",
            "6251 32328\n",
            "6252 32329\n",
            "6254 32330\n",
            "6255 32331\n",
            "6257 32332\n",
            "6259 32333\n",
            "626 32334\n",
            "6262 32335\n",
            "6263 32336\n",
            "6264 32337\n",
            "6265 32338\n",
            "6268 32339\n",
            "6269 32340\n",
            "627 32341\n",
            "6270 32342\n",
            "6271 32343\n",
            "6277 32344\n",
            "6278 32345\n",
            "6279 32346\n",
            "628 32347\n",
            "6280 32348\n",
            "6281 32349\n",
            "6283 32350\n",
            "6284 32351\n",
            "6286 32352\n",
            "6288 32353\n",
            "6289 32354\n",
            "629 32355\n",
            "6292 32356\n",
            "6294 32357\n",
            "6295 32358\n",
            "6296 32359\n",
            "6297 32360\n",
            "6299 32361\n",
            "63 32362\n",
            "630 32363\n",
            "6300 32364\n",
            "6301 32365\n",
            "6303 32366\n",
            "6305 32367\n",
            "6306 32368\n",
            "6307 32369\n",
            "6308 32370\n",
            "6309 32371\n",
            "6310 32372\n",
            "6311 32373\n",
            "6312 32374\n",
            "6313 32375\n",
            "6314 32376\n",
            "6315 32377\n",
            "6317 32378\n",
            "6318 32379\n",
            "6319 32380\n",
            "6321 32381\n",
            "6322 32382\n",
            "6323 32383\n",
            "6324 32384\n",
            "6325 32385\n",
            "6326 32386\n",
            "6327 32387\n",
            "6328 32388\n",
            "6330 32389\n",
            "6331 32390\n",
            "6332 32391\n",
            "6333 32392\n",
            "6334 32393\n",
            "6335 32394\n",
            "6336 32395\n",
            "6337 32396\n",
            "6338 32397\n",
            "6339 32398\n",
            "6340 32399\n",
            "6342 32400\n",
            "6343 32401\n",
            "6344 32402\n",
            "6346 32403\n",
            "6347 32404\n",
            "6348 32405\n",
            "6349 32406\n",
            "635 32407\n",
            "6351 32408\n",
            "6352 32409\n",
            "6353 32410\n",
            "6354 32411\n",
            "6356 32412\n",
            "6357 32413\n",
            "6358 32414\n",
            "636 32415\n",
            "6360 32416\n",
            "6361 32417\n",
            "6362 32418\n",
            "6363 32419\n",
            "6364 32420\n",
            "6367 32421\n",
            "6368 32422\n",
            "6369 32423\n",
            "637 32424\n",
            "6370 32425\n",
            "6371 32426\n",
            "6373 32427\n",
            "6374 32428\n",
            "6376 32429\n",
            "6377 32430\n",
            "6378 32431\n",
            "6379 32432\n",
            "638 32433\n",
            "6380 32434\n",
            "6382 32435\n",
            "6383 32436\n",
            "6384 32437\n",
            "6386 32438\n",
            "6387 32439\n",
            "639 32440\n",
            "6390 32441\n",
            "6391 32442\n",
            "6392 32443\n",
            "6393 32444\n",
            "6394 32445\n",
            "6395 32446\n",
            "6396 32447\n",
            "6397 32448\n",
            "6399 32449\n",
            "6400 32450\n",
            "6402 32451\n",
            "6403 32452\n",
            "6404 32453\n",
            "6405 32454\n",
            "6406 32455\n",
            "6407 32456\n",
            "6408 32457\n",
            "641 32458\n",
            "6410 32459\n",
            "6412 32460\n",
            "6413 32461\n",
            "6414 32462\n",
            "6415 32463\n",
            "6417 32464\n",
            "6418 32465\n",
            "6419 32466\n",
            "6420 32467\n",
            "6421 32468\n",
            "6423 32469\n",
            "6424 32470\n",
            "6425 32471\n",
            "6426 32472\n",
            "6427 32473\n",
            "6428 32474\n",
            "643 32475\n",
            "6431 32476\n",
            "6432 32477\n",
            "6433 32478\n",
            "6435 32479\n",
            "6436 32480\n",
            "6437 32481\n",
            "6439 32482\n",
            "6440 32483\n",
            "6441 32484\n",
            "6442 32485\n",
            "6443 32486\n",
            "6445 32487\n",
            "6446 32488\n",
            "6447 32489\n",
            "645 32490\n",
            "6451 32491\n",
            "6453 32492\n",
            "6454 32493\n",
            "6455 32494\n",
            "6456 32495\n",
            "6457 32496\n",
            "6459 32497\n",
            "646 32498\n",
            "6462 32499\n",
            "6463 32500\n",
            "6464 32501\n",
            "6465 32502\n",
            "6466 32503\n",
            "6468 32504\n",
            "6469 32505\n",
            "647 32506\n",
            "6470 32507\n",
            "6471 32508\n",
            "6472 32509\n",
            "6473 32510\n",
            "6474 32511\n",
            "6475 32512\n",
            "6476 32513\n",
            "6477 32514\n",
            "6478 32515\n",
            "648 32516\n",
            "6480 32517\n",
            "6481 32518\n",
            "6482 32519\n",
            "6484 32520\n",
            "6485 32521\n",
            "6486 32522\n",
            "6488 32523\n",
            "6489 32524\n",
            "649 32525\n",
            "6490 32526\n",
            "6491 32527\n",
            "6492 32528\n",
            "6493 32529\n",
            "6494 32530\n",
            "6495 32531\n",
            "6497 32532\n",
            "6499 32533\n",
            "65 32534\n",
            "650 32535\n",
            "6500 32536\n",
            "6501 32537\n",
            "6503 32538\n",
            "6504 32539\n",
            "6505 32540\n",
            "6506 32541\n",
            "6507 32542\n",
            "6508 32543\n",
            "651 32544\n",
            "6510 32545\n",
            "6512 32546\n",
            "6513 32547\n",
            "6515 32548\n",
            "6516 32549\n",
            "6517 32550\n",
            "6518 32551\n",
            "6519 32552\n",
            "652 32553\n",
            "6520 32554\n",
            "6521 32555\n",
            "6524 32556\n",
            "6528 32557\n",
            "6529 32558\n",
            "653 32559\n",
            "6531 32560\n",
            "6532 32561\n",
            "6533 32562\n",
            "6535 32563\n",
            "654 32564\n",
            "6540 32565\n",
            "6541 32566\n",
            "6543 32567\n",
            "6544 32568\n",
            "6545 32569\n",
            "6549 32570\n",
            "655 32571\n",
            "6551 32572\n",
            "6553 32573\n",
            "6554 32574\n",
            "6555 32575\n",
            "6556 32576\n",
            "6557 32577\n",
            "6559 32578\n",
            "656 32579\n",
            "6561 32580\n",
            "6564 32581\n",
            "6566 32582\n",
            "6567 32583\n",
            "6568 32584\n",
            "6571 32585\n",
            "6572 32586\n",
            "6573 32587\n",
            "6574 32588\n",
            "6575 32589\n",
            "6576 32590\n",
            "6578 32591\n",
            "6579 32592\n",
            "6580 32593\n",
            "6581 32594\n",
            "6582 32595\n",
            "6583 32596\n",
            "6584 32597\n",
            "6585 32598\n",
            "6586 32599\n",
            "6587 32600\n",
            "6588 32601\n",
            "6589 32602\n",
            "659 32603\n",
            "6590 32604\n",
            "6591 32605\n",
            "6592 32606\n",
            "6594 32607\n",
            "6595 32608\n",
            "6597 32609\n",
            "6599 32610\n",
            "66 32611\n",
            "660 32612\n",
            "6600 32613\n",
            "6602 32614\n",
            "6604 32615\n",
            "6605 32616\n",
            "6606 32617\n",
            "6608 32618\n",
            "6609 32619\n",
            "661 32620\n",
            "6610 32621\n",
            "6612 32622\n",
            "6614 32623\n",
            "6615 32624\n",
            "6616 32625\n",
            "6619 32626\n",
            "6621 32627\n",
            "6622 32628\n",
            "6623 32629\n",
            "6625 32630\n",
            "6626 32631\n",
            "6628 32632\n",
            "663 32633\n",
            "6633 32634\n",
            "6635 32635\n",
            "6636 32636\n",
            "6637 32637\n",
            "6638 32638\n",
            "664 32639\n",
            "6640 32640\n",
            "6641 32641\n",
            "6642 32642\n",
            "6643 32643\n",
            "6645 32644\n",
            "6649 32645\n",
            "665 32646\n",
            "6654 32647\n",
            "6656 32648\n",
            "6657 32649\n",
            "6659 32650\n",
            "6662 32651\n",
            "6664 32652\n",
            "6666 32653\n",
            "6667 32654\n",
            "6668 32655\n",
            "667 32656\n",
            "6671 32657\n",
            "6672 32658\n",
            "6673 32659\n",
            "6675 32660\n",
            "6677 32661\n",
            "6679 32662\n",
            "668 32663\n",
            "6681 32664\n",
            "6683 32665\n",
            "6686 32666\n",
            "6687 32667\n",
            "6688 32668\n",
            "6689 32669\n",
            "6690 32670\n",
            "6692 32671\n",
            "6693 32672\n",
            "6694 32673\n",
            "6695 32674\n",
            "6696 32675\n",
            "6698 32676\n",
            "6699 32677\n",
            "67 32678\n",
            "670 32679\n",
            "6702 32680\n",
            "6703 32681\n",
            "6704 32682\n",
            "6706 32683\n",
            "6707 32684\n",
            "6708 32685\n",
            "671 32686\n",
            "6711 32687\n",
            "6712 32688\n",
            "6713 32689\n",
            "6714 32690\n",
            "6715 32691\n",
            "6716 32692\n",
            "6717 32693\n",
            "6718 32694\n",
            "672 32695\n",
            "6720 32696\n",
            "6722 32697\n",
            "6723 32698\n",
            "6724 32699\n",
            "6725 32700\n",
            "6728 32701\n",
            "673 32702\n",
            "6732 32703\n",
            "6733 32704\n",
            "6735 32705\n",
            "6736 32706\n",
            "6737 32707\n",
            "6738 32708\n",
            "674 32709\n",
            "6742 32710\n",
            "6743 32711\n",
            "6745 32712\n",
            "6746 32713\n",
            "6747 32714\n",
            "6748 32715\n",
            "6749 32716\n",
            "675 32717\n",
            "6751 32718\n",
            "6752 32719\n",
            "6753 32720\n",
            "6754 32721\n",
            "6755 32722\n",
            "6756 32723\n",
            "6757 32724\n",
            "6758 32725\n",
            "6761 32726\n",
            "6762 32727\n",
            "6763 32728\n",
            "6765 32729\n",
            "6767 32730\n",
            "6768 32731\n",
            "6769 32732\n",
            "677 32733\n",
            "6770 32734\n",
            "6771 32735\n",
            "6773 32736\n",
            "6774 32737\n",
            "6775 32738\n",
            "6776 32739\n",
            "6777 32740\n",
            "6778 32741\n",
            "6779 32742\n",
            "6780 32743\n",
            "6781 32744\n",
            "6782 32745\n",
            "6783 32746\n",
            "6784 32747\n",
            "6785 32748\n",
            "6788 32749\n",
            "6790 32750\n",
            "6791 32751\n",
            "6793 32752\n",
            "6794 32753\n",
            "6795 32754\n",
            "6797 32755\n",
            "6798 32756\n",
            "68 32757\n",
            "680 32758\n",
            "6800 32759\n",
            "6801 32760\n",
            "6803 32761\n",
            "6804 32762\n",
            "6805 32763\n",
            "6806 32764\n",
            "6807 32765\n",
            "6808 32766\n",
            "6809 32767\n",
            "681 32768\n",
            "6810 32769\n",
            "6811 32770\n",
            "6813 32771\n",
            "6814 32772\n",
            "6815 32773\n",
            "6816 32774\n",
            "6818 32775\n",
            "6819 32776\n",
            "682 32777\n",
            "6821 32778\n",
            "6822 32779\n",
            "6823 32780\n",
            "6824 32781\n",
            "6825 32782\n",
            "6827 32783\n",
            "6829 32784\n",
            "6830 32785\n",
            "6831 32786\n",
            "6833 32787\n",
            "6834 32788\n",
            "6835 32789\n",
            "6836 32790\n",
            "6837 32791\n",
            "6838 32792\n",
            "6839 32793\n",
            "6840 32794\n",
            "6841 32795\n",
            "6842 32796\n",
            "6843 32797\n",
            "6845 32798\n",
            "6846 32799\n",
            "6847 32800\n",
            "6848 32801\n",
            "6850 32802\n",
            "6851 32803\n",
            "6852 32804\n",
            "6853 32805\n",
            "6855 32806\n",
            "6856 32807\n",
            "6857 32808\n",
            "6859 32809\n",
            "686 32810\n",
            "6860 32811\n",
            "6862 32812\n",
            "6865 32813\n",
            "6866 32814\n",
            "6867 32815\n",
            "6869 32816\n",
            "6871 32817\n",
            "6872 32818\n",
            "6873 32819\n",
            "6875 32820\n",
            "6876 32821\n",
            "6878 32822\n",
            "6879 32823\n",
            "688 32824\n",
            "6880 32825\n",
            "6881 32826\n",
            "6882 32827\n",
            "6884 32828\n",
            "6885 32829\n",
            "6886 32830\n",
            "6889 32831\n",
            "689 32832\n",
            "6890 32833\n",
            "6891 32834\n",
            "6894 32835\n",
            "6895 32836\n",
            "6898 32837\n",
            "69 32838\n",
            "690 32839\n",
            "6901 32840\n",
            "6902 32841\n",
            "6903 32842\n",
            "6904 32843\n",
            "6906 32844\n",
            "6907 32845\n",
            "6909 32846\n",
            "6910 32847\n",
            "6911 32848\n",
            "6913 32849\n",
            "6918 32850\n",
            "6919 32851\n",
            "692 32852\n",
            "6922 32853\n",
            "6923 32854\n",
            "6927 32855\n",
            "6928 32856\n",
            "6929 32857\n",
            "693 32858\n",
            "6930 32859\n",
            "6932 32860\n",
            "6933 32861\n",
            "6934 32862\n",
            "6935 32863\n",
            "6936 32864\n",
            "6937 32865\n",
            "6938 32866\n",
            "6939 32867\n",
            "6940 32868\n",
            "6942 32869\n",
            "6943 32870\n",
            "6950 32871\n",
            "6951 32872\n",
            "6952 32873\n",
            "6953 32874\n",
            "6955 32875\n",
            "6956 32876\n",
            "6957 32877\n",
            "6958 32878\n",
            "6959 32879\n",
            "696 32880\n",
            "6960 32881\n",
            "6962 32882\n",
            "6963 32883\n",
            "6964 32884\n",
            "6965 32885\n",
            "6967 32886\n",
            "6968 32887\n",
            "6969 32888\n",
            "697 32889\n",
            "6970 32890\n",
            "6971 32891\n",
            "6972 32892\n",
            "6973 32893\n",
            "6976 32894\n",
            "6977 32895\n",
            "6979 32896\n",
            "6980 32897\n",
            "6981 32898\n",
            "6982 32899\n",
            "6984 32900\n",
            "6985 32901\n",
            "6986 32902\n",
            "6987 32903\n",
            "6988 32904\n",
            "699 32905\n",
            "6991 32906\n",
            "6993 32907\n",
            "6994 32908\n",
            "6995 32909\n",
            "6997 32910\n",
            "6999 32911\n",
            "70 32912\n",
            "700 32913\n",
            "7000 32914\n",
            "7001 32915\n",
            "7002 32916\n",
            "7005 32917\n",
            "7006 32918\n",
            "7007 32919\n",
            "7008 32920\n",
            "7009 32921\n",
            "701 32922\n",
            "7010 32923\n",
            "7011 32924\n",
            "7013 32925\n",
            "7014 32926\n",
            "7015 32927\n",
            "7017 32928\n",
            "702 32929\n",
            "7021 32930\n",
            "7022 32931\n",
            "7024 32932\n",
            "7026 32933\n",
            "7027 32934\n",
            "7028 32935\n",
            "7029 32936\n",
            "703 32937\n",
            "7030 32938\n",
            "7032 32939\n",
            "7033 32940\n",
            "7034 32941\n",
            "7035 32942\n",
            "7036 32943\n",
            "7037 32944\n",
            "7038 32945\n",
            "7040 32946\n",
            "7041 32947\n",
            "7043 32948\n",
            "7044 32949\n",
            "7046 32950\n",
            "7047 32951\n",
            "7048 32952\n",
            "705 32953\n",
            "7050 32954\n",
            "7053 32955\n",
            "7054 32956\n",
            "7055 32957\n",
            "7056 32958\n",
            "7057 32959\n",
            "7058 32960\n",
            "7059 32961\n",
            "706 32962\n",
            "7060 32963\n",
            "7062 32964\n",
            "7063 32965\n",
            "7065 32966\n",
            "7068 32967\n",
            "7069 32968\n",
            "7070 32969\n",
            "7072 32970\n",
            "7076 32971\n",
            "7077 32972\n",
            "7078 32973\n",
            "7081 32974\n",
            "7082 32975\n",
            "7084 32976\n",
            "7085 32977\n",
            "7086 32978\n",
            "7087 32979\n",
            "7088 32980\n",
            "709 32981\n",
            "7090 32982\n",
            "7091 32983\n",
            "7092 32984\n",
            "7094 32985\n",
            "7095 32986\n",
            "7096 32987\n",
            "7097 32988\n",
            "7099 32989\n",
            "71 32990\n",
            "710 32991\n",
            "7100 32992\n",
            "7101 32993\n",
            "7102 32994\n",
            "7103 32995\n",
            "7104 32996\n",
            "7105 32997\n",
            "7106 32998\n",
            "7107 32999\n",
            "7109 33000\n",
            "7110 33001\n",
            "7111 33002\n",
            "7113 33003\n",
            "7115 33004\n",
            "7116 33005\n",
            "7117 33006\n",
            "7118 33007\n",
            "7119 33008\n",
            "712 33009\n",
            "7122 33010\n",
            "7123 33011\n",
            "7124 33012\n",
            "7126 33013\n",
            "7128 33014\n",
            "7129 33015\n",
            "7130 33016\n",
            "7132 33017\n",
            "7133 33018\n",
            "7134 33019\n",
            "7135 33020\n",
            "7136 33021\n",
            "7137 33022\n",
            "7138 33023\n",
            "7139 33024\n",
            "714 33025\n",
            "7140 33026\n",
            "7141 33027\n",
            "7142 33028\n",
            "7143 33029\n",
            "7145 33030\n",
            "7146 33031\n",
            "7147 33032\n",
            "7148 33033\n",
            "7149 33034\n",
            "715 33035\n",
            "7151 33036\n",
            "7154 33037\n",
            "7157 33038\n",
            "7159 33039\n",
            "716 33040\n",
            "7162 33041\n",
            "7163 33042\n",
            "7164 33043\n",
            "7166 33044\n",
            "7167 33045\n",
            "7169 33046\n",
            "7170 33047\n",
            "7172 33048\n",
            "7173 33049\n",
            "7177 33050\n",
            "7179 33051\n",
            "7180 33052\n",
            "7182 33053\n",
            "7183 33054\n",
            "7185 33055\n",
            "7186 33056\n",
            "7188 33057\n",
            "7189 33058\n",
            "719 33059\n",
            "7191 33060\n",
            "7192 33061\n",
            "7193 33062\n",
            "7195 33063\n",
            "7197 33064\n",
            "7198 33065\n",
            "72 33066\n",
            "720 33067\n",
            "7200 33068\n",
            "7202 33069\n",
            "7203 33070\n",
            "7204 33071\n",
            "7205 33072\n",
            "7207 33073\n",
            "7208 33074\n",
            "7209 33075\n",
            "721 33076\n",
            "7210 33077\n",
            "7211 33078\n",
            "7212 33079\n",
            "7213 33080\n",
            "7215 33081\n",
            "7216 33082\n",
            "7217 33083\n",
            "7218 33084\n",
            "7219 33085\n",
            "722 33086\n",
            "7220 33087\n",
            "7222 33088\n",
            "7223 33089\n",
            "7224 33090\n",
            "7225 33091\n",
            "7228 33092\n",
            "7229 33093\n",
            "723 33094\n",
            "7230 33095\n",
            "7231 33096\n",
            "7232 33097\n",
            "7235 33098\n",
            "7238 33099\n",
            "724 33100\n",
            "7240 33101\n",
            "7241 33102\n",
            "7243 33103\n",
            "7244 33104\n",
            "7246 33105\n",
            "7247 33106\n",
            "7248 33107\n",
            "7250 33108\n",
            "7251 33109\n",
            "7254 33110\n",
            "7255 33111\n",
            "7257 33112\n",
            "7258 33113\n",
            "7260 33114\n",
            "7261 33115\n",
            "7262 33116\n",
            "7263 33117\n",
            "7264 33118\n",
            "7265 33119\n",
            "7266 33120\n",
            "7267 33121\n",
            "7268 33122\n",
            "7269 33123\n",
            "727 33124\n",
            "7271 33125\n",
            "7272 33126\n",
            "7273 33127\n",
            "7275 33128\n",
            "7276 33129\n",
            "7278 33130\n",
            "7279 33131\n",
            "7280 33132\n",
            "7281 33133\n",
            "7282 33134\n",
            "7283 33135\n",
            "7284 33136\n",
            "7286 33137\n",
            "7287 33138\n",
            "7288 33139\n",
            "7291 33140\n",
            "7292 33141\n",
            "7294 33142\n",
            "7296 33143\n",
            "7297 33144\n",
            "7298 33145\n",
            "7299 33146\n",
            "73 33147\n",
            "730 33148\n",
            "7300 33149\n",
            "7301 33150\n",
            "7302 33151\n",
            "7303 33152\n",
            "7306 33153\n",
            "7307 33154\n",
            "7308 33155\n",
            "7309 33156\n",
            "731 33157\n",
            "7312 33158\n",
            "7313 33159\n",
            "7314 33160\n",
            "7317 33161\n",
            "7318 33162\n",
            "7319 33163\n",
            "732 33164\n",
            "7320 33165\n",
            "7322 33166\n",
            "7323 33167\n",
            "7324 33168\n",
            "7325 33169\n",
            "7327 33170\n",
            "7330 33171\n",
            "7333 33172\n",
            "7334 33173\n",
            "7335 33174\n",
            "7340 33175\n",
            "7341 33176\n",
            "7342 33177\n",
            "7343 33178\n",
            "7344 33179\n",
            "7345 33180\n",
            "7346 33181\n",
            "7348 33182\n",
            "7349 33183\n",
            "7350 33184\n",
            "7351 33185\n",
            "7353 33186\n",
            "7354 33187\n",
            "7355 33188\n",
            "7356 33189\n",
            "7357 33190\n",
            "7358 33191\n",
            "736 33192\n",
            "7360 33193\n",
            "7361 33194\n",
            "7362 33195\n",
            "7363 33196\n",
            "7366 33197\n",
            "7369 33198\n",
            "737 33199\n",
            "7370 33200\n",
            "7371 33201\n",
            "7375 33202\n",
            "7376 33203\n",
            "7377 33204\n",
            "7378 33205\n",
            "7379 33206\n",
            "738 33207\n",
            "7380 33208\n",
            "7381 33209\n",
            "7382 33210\n",
            "7383 33211\n",
            "7385 33212\n",
            "7386 33213\n",
            "7387 33214\n",
            "7388 33215\n",
            "739 33216\n",
            "7392 33217\n",
            "7393 33218\n",
            "7394 33219\n",
            "7395 33220\n",
            "7396 33221\n",
            "7398 33222\n",
            "7399 33223\n",
            "74 33224\n",
            "7400 33225\n",
            "7401 33226\n",
            "7402 33227\n",
            "7403 33228\n",
            "7404 33229\n",
            "7405 33230\n",
            "7406 33231\n",
            "7407 33232\n",
            "7408 33233\n",
            "7409 33234\n",
            "7410 33235\n",
            "7411 33236\n",
            "7414 33237\n",
            "7419 33238\n",
            "742 33239\n",
            "7420 33240\n",
            "7421 33241\n",
            "7423 33242\n",
            "7424 33243\n",
            "7425 33244\n",
            "7426 33245\n",
            "7427 33246\n",
            "7428 33247\n",
            "7430 33248\n",
            "7431 33249\n",
            "7432 33250\n",
            "7434 33251\n",
            "7435 33252\n",
            "7438 33253\n",
            "7440 33254\n",
            "7441 33255\n",
            "7443 33256\n",
            "7445 33257\n",
            "7449 33258\n",
            "7452 33259\n",
            "7453 33260\n",
            "7454 33261\n",
            "7456 33262\n",
            "7457 33263\n",
            "7459 33264\n",
            "7460 33265\n",
            "7461 33266\n",
            "7463 33267\n",
            "7465 33268\n",
            "7466 33269\n",
            "7467 33270\n",
            "7468 33271\n",
            "7469 33272\n",
            "7470 33273\n",
            "7471 33274\n",
            "7472 33275\n",
            "7474 33276\n",
            "7475 33277\n",
            "7477 33278\n",
            "7479 33279\n",
            "748 33280\n",
            "7480 33281\n",
            "7482 33282\n",
            "7483 33283\n",
            "7484 33284\n",
            "7485 33285\n",
            "7486 33286\n",
            "749 33287\n",
            "7491 33288\n",
            "7492 33289\n",
            "7493 33290\n",
            "7496 33291\n",
            "7497 33292\n",
            "750 33293\n",
            "7500 33294\n",
            "7501 33295\n",
            "7502 33296\n",
            "7504 33297\n",
            "7505 33298\n",
            "7506 33299\n",
            "7507 33300\n",
            "7508 33301\n",
            "7509 33302\n",
            "751 33303\n",
            "7510 33304\n",
            "7511 33305\n",
            "7512 33306\n",
            "7513 33307\n",
            "7515 33308\n",
            "7518 33309\n",
            "752 33310\n",
            "7520 33311\n",
            "7521 33312\n",
            "7522 33313\n",
            "7523 33314\n",
            "7524 33315\n",
            "7525 33316\n",
            "7526 33317\n",
            "7527 33318\n",
            "7528 33319\n",
            "7529 33320\n",
            "753 33321\n",
            "7530 33322\n",
            "7531 33323\n",
            "7532 33324\n",
            "7533 33325\n",
            "7534 33326\n",
            "7537 33327\n",
            "7538 33328\n",
            "7539 33329\n",
            "754 33330\n",
            "7540 33331\n",
            "7541 33332\n",
            "7542 33333\n",
            "7544 33334\n",
            "7545 33335\n",
            "7546 33336\n",
            "7547 33337\n",
            "7548 33338\n",
            "755 33339\n",
            "7552 33340\n",
            "7555 33341\n",
            "7556 33342\n",
            "7557 33343\n",
            "7559 33344\n",
            "7560 33345\n",
            "7563 33346\n",
            "7569 33347\n",
            "757 33348\n",
            "7570 33349\n",
            "7571 33350\n",
            "7572 33351\n",
            "7573 33352\n",
            "7574 33353\n",
            "7575 33354\n",
            "7577 33355\n",
            "7578 33356\n",
            "758 33357\n",
            "7581 33358\n",
            "7584 33359\n",
            "7585 33360\n",
            "7587 33361\n",
            "7588 33362\n",
            "7589 33363\n",
            "759 33364\n",
            "7590 33365\n",
            "7592 33366\n",
            "7594 33367\n",
            "7596 33368\n",
            "7597 33369\n",
            "7598 33370\n",
            "7599 33371\n",
            "76 33372\n",
            "760 33373\n",
            "7601 33374\n",
            "7603 33375\n",
            "7604 33376\n",
            "7607 33377\n",
            "7608 33378\n",
            "7611 33379\n",
            "7612 33380\n",
            "7614 33381\n",
            "7615 33382\n",
            "7616 33383\n",
            "7617 33384\n",
            "7618 33385\n",
            "7619 33386\n",
            "7620 33387\n",
            "7621 33388\n",
            "7623 33389\n",
            "7624 33390\n",
            "7625 33391\n",
            "7626 33392\n",
            "7627 33393\n",
            "7629 33394\n",
            "7630 33395\n",
            "7632 33396\n",
            "7633 33397\n",
            "7634 33398\n",
            "7635 33399\n",
            "7636 33400\n",
            "7639 33401\n",
            "7640 33402\n",
            "7642 33403\n",
            "7644 33404\n",
            "7649 33405\n",
            "765 33406\n",
            "7650 33407\n",
            "7651 33408\n",
            "7652 33409\n",
            "7653 33410\n",
            "7654 33411\n",
            "7656 33412\n",
            "7657 33413\n",
            "766 33414\n",
            "7660 33415\n",
            "7661 33416\n",
            "7662 33417\n",
            "7663 33418\n",
            "7664 33419\n",
            "7665 33420\n",
            "7666 33421\n",
            "7667 33422\n",
            "7669 33423\n",
            "767 33424\n",
            "7670 33425\n",
            "7671 33426\n",
            "7672 33427\n",
            "7673 33428\n",
            "7674 33429\n",
            "7675 33430\n",
            "7677 33431\n",
            "7679 33432\n",
            "768 33433\n",
            "7680 33434\n",
            "7681 33435\n",
            "7683 33436\n",
            "7684 33437\n",
            "7685 33438\n",
            "7686 33439\n",
            "7688 33440\n",
            "7689 33441\n",
            "769 33442\n",
            "7690 33443\n",
            "7691 33444\n",
            "7692 33445\n",
            "7693 33446\n",
            "7694 33447\n",
            "7695 33448\n",
            "7696 33449\n",
            "7697 33450\n",
            "77 33451\n",
            "770 33452\n",
            "7700 33453\n",
            "7702 33454\n",
            "7703 33455\n",
            "7704 33456\n",
            "7705 33457\n",
            "7706 33458\n",
            "7708 33459\n",
            "7709 33460\n",
            "7710 33461\n",
            "7711 33462\n",
            "7715 33463\n",
            "7716 33464\n",
            "7718 33465\n",
            "772 33466\n",
            "7720 33467\n",
            "7722 33468\n",
            "7725 33469\n",
            "7726 33470\n",
            "7727 33471\n",
            "7728 33472\n",
            "7729 33473\n",
            "773 33474\n",
            "7730 33475\n",
            "7732 33476\n",
            "7733 33477\n",
            "7734 33478\n",
            "7735 33479\n",
            "7737 33480\n",
            "7738 33481\n",
            "7739 33482\n",
            "774 33483\n",
            "7740 33484\n",
            "7741 33485\n",
            "7743 33486\n",
            "7744 33487\n",
            "7745 33488\n",
            "7748 33489\n",
            "7749 33490\n",
            "7750 33491\n",
            "7751 33492\n",
            "7754 33493\n",
            "7755 33494\n",
            "7756 33495\n",
            "776 33496\n",
            "7761 33497\n",
            "7763 33498\n",
            "7764 33499\n",
            "7765 33500\n",
            "7766 33501\n",
            "7767 33502\n",
            "7769 33503\n",
            "777 33504\n",
            "7770 33505\n",
            "7771 33506\n",
            "7776 33507\n",
            "7777 33508\n",
            "7778 33509\n",
            "778 33510\n",
            "7780 33511\n",
            "7781 33512\n",
            "7782 33513\n",
            "7784 33514\n",
            "7785 33515\n",
            "7786 33516\n",
            "7788 33517\n",
            "779 33518\n",
            "7792 33519\n",
            "7793 33520\n",
            "7794 33521\n",
            "7796 33522\n",
            "7798 33523\n",
            "7800 33524\n",
            "7801 33525\n",
            "7802 33526\n",
            "7804 33527\n",
            "7805 33528\n",
            "7806 33529\n",
            "7807 33530\n",
            "7808 33531\n",
            "7809 33532\n",
            "781 33533\n",
            "7811 33534\n",
            "7812 33535\n",
            "7813 33536\n",
            "7814 33537\n",
            "7816 33538\n",
            "7817 33539\n",
            "7819 33540\n",
            "782 33541\n",
            "7820 33542\n",
            "7822 33543\n",
            "7823 33544\n",
            "7824 33545\n",
            "7826 33546\n",
            "7827 33547\n",
            "7828 33548\n",
            "7829 33549\n",
            "783 33550\n",
            "7830 33551\n",
            "7831 33552\n",
            "7833 33553\n",
            "7834 33554\n",
            "7835 33555\n",
            "7836 33556\n",
            "7837 33557\n",
            "7838 33558\n",
            "7839 33559\n",
            "784 33560\n",
            "7840 33561\n",
            "7842 33562\n",
            "7843 33563\n",
            "7845 33564\n",
            "7846 33565\n",
            "7848 33566\n",
            "7849 33567\n",
            "785 33568\n",
            "7850 33569\n",
            "7852 33570\n",
            "7853 33571\n",
            "7855 33572\n",
            "7856 33573\n",
            "7857 33574\n",
            "7860 33575\n",
            "7861 33576\n",
            "7864 33577\n",
            "7865 33578\n",
            "7866 33579\n",
            "7867 33580\n",
            "7868 33581\n",
            "7869 33582\n",
            "787 33583\n",
            "7870 33584\n",
            "7872 33585\n",
            "7873 33586\n",
            "7874 33587\n",
            "7875 33588\n",
            "7877 33589\n",
            "7879 33590\n",
            "788 33591\n",
            "7880 33592\n",
            "7881 33593\n",
            "7884 33594\n",
            "7885 33595\n",
            "7886 33596\n",
            "7887 33597\n",
            "789 33598\n",
            "7891 33599\n",
            "7892 33600\n",
            "7893 33601\n",
            "7894 33602\n",
            "7896 33603\n",
            "7897 33604\n",
            "7898 33605\n",
            "7899 33606\n",
            "79 33607\n",
            "790 33608\n",
            "7901 33609\n",
            "7903 33610\n",
            "7904 33611\n",
            "7907 33612\n",
            "7908 33613\n",
            "7910 33614\n",
            "7912 33615\n",
            "7913 33616\n",
            "7916 33617\n",
            "7918 33618\n",
            "7919 33619\n",
            "792 33620\n",
            "7921 33621\n",
            "7923 33622\n",
            "7924 33623\n",
            "7925 33624\n",
            "7926 33625\n",
            "7927 33626\n",
            "7929 33627\n",
            "7930 33628\n",
            "7931 33629\n",
            "7932 33630\n",
            "7933 33631\n",
            "7934 33632\n",
            "7936 33633\n",
            "7937 33634\n",
            "7938 33635\n",
            "7939 33636\n",
            "7942 33637\n",
            "7943 33638\n",
            "7944 33639\n",
            "7945 33640\n",
            "7948 33641\n",
            "7949 33642\n",
            "7950 33643\n",
            "7951 33644\n",
            "7954 33645\n",
            "7955 33646\n",
            "7957 33647\n",
            "7958 33648\n",
            "7962 33649\n",
            "7963 33650\n",
            "7964 33651\n",
            "7968 33652\n",
            "7969 33653\n",
            "7970 33654\n",
            "7971 33655\n",
            "7972 33656\n",
            "7973 33657\n",
            "7975 33658\n",
            "7976 33659\n",
            "7978 33660\n",
            "7979 33661\n",
            "7982 33662\n",
            "7983 33663\n",
            "7984 33664\n",
            "7986 33665\n",
            "7987 33666\n",
            "7988 33667\n",
            "7989 33668\n",
            "7991 33669\n",
            "7992 33670\n",
            "7994 33671\n",
            "7995 33672\n",
            "7996 33673\n",
            "7997 33674\n",
            "7999 33675\n",
            "8 33676\n",
            "80 33677\n",
            "800 33678\n",
            "8001 33679\n",
            "8002 33680\n",
            "8004 33681\n",
            "8005 33682\n",
            "8009 33683\n",
            "801 33684\n",
            "8010 33685\n",
            "8011 33686\n",
            "8012 33687\n",
            "8013 33688\n",
            "8014 33689\n",
            "8015 33690\n",
            "8017 33691\n",
            "8018 33692\n",
            "8019 33693\n",
            "802 33694\n",
            "8020 33695\n",
            "8021 33696\n",
            "8022 33697\n",
            "8025 33698\n",
            "8026 33699\n",
            "8028 33700\n",
            "8029 33701\n",
            "8030 33702\n",
            "8031 33703\n",
            "8032 33704\n",
            "8033 33705\n",
            "8035 33706\n",
            "8036 33707\n",
            "8037 33708\n",
            "8039 33709\n",
            "804 33710\n",
            "8040 33711\n",
            "8042 33712\n",
            "8045 33713\n",
            "8046 33714\n",
            "8047 33715\n",
            "8048 33716\n",
            "8052 33717\n",
            "8053 33718\n",
            "8056 33719\n",
            "8058 33720\n",
            "8059 33721\n",
            "8060 33722\n",
            "8061 33723\n",
            "8062 33724\n",
            "8064 33725\n",
            "8066 33726\n",
            "8068 33727\n",
            "8069 33728\n",
            "8070 33729\n",
            "8071 33730\n",
            "8073 33731\n",
            "8074 33732\n",
            "8075 33733\n",
            "8076 33734\n",
            "8077 33735\n",
            "8078 33736\n",
            "8079 33737\n",
            "808 33738\n",
            "8080 33739\n",
            "8081 33740\n",
            "8085 33741\n",
            "8086 33742\n",
            "8089 33743\n",
            "809 33744\n",
            "8090 33745\n",
            "8091 33746\n",
            "8093 33747\n",
            "8094 33748\n",
            "8097 33749\n",
            "8098 33750\n",
            "8099 33751\n",
            "81 33752\n",
            "810 33753\n",
            "8100 33754\n",
            "8101 33755\n",
            "8102 33756\n",
            "8103 33757\n",
            "8104 33758\n",
            "8105 33759\n",
            "8106 33760\n",
            "8107 33761\n",
            "8108 33762\n",
            "811 33763\n",
            "8110 33764\n",
            "8111 33765\n",
            "8112 33766\n",
            "8114 33767\n",
            "8115 33768\n",
            "8116 33769\n",
            "8118 33770\n",
            "812 33771\n",
            "8120 33772\n",
            "8121 33773\n",
            "8122 33774\n",
            "8123 33775\n",
            "8124 33776\n",
            "8126 33777\n",
            "8127 33778\n",
            "813 33779\n",
            "8130 33780\n",
            "8131 33781\n",
            "8134 33782\n",
            "8135 33783\n",
            "8136 33784\n",
            "8137 33785\n",
            "8138 33786\n",
            "8139 33787\n",
            "814 33788\n",
            "8141 33789\n",
            "8142 33790\n",
            "8143 33791\n",
            "8144 33792\n",
            "8145 33793\n",
            "8146 33794\n",
            "8147 33795\n",
            "8148 33796\n",
            "8149 33797\n",
            "815 33798\n",
            "8150 33799\n",
            "8151 33800\n",
            "8152 33801\n",
            "8153 33802\n",
            "8154 33803\n",
            "8155 33804\n",
            "8156 33805\n",
            "8158 33806\n",
            "816 33807\n",
            "8160 33808\n",
            "8161 33809\n",
            "8165 33810\n",
            "8167 33811\n",
            "8169 33812\n",
            "8171 33813\n",
            "8172 33814\n",
            "8173 33815\n",
            "8174 33816\n",
            "8175 33817\n",
            "8176 33818\n",
            "8177 33819\n",
            "8178 33820\n",
            "8179 33821\n",
            "818 33822\n",
            "8181 33823\n",
            "8183 33824\n",
            "8184 33825\n",
            "8186 33826\n",
            "8187 33827\n",
            "8189 33828\n",
            "819 33829\n",
            "8190 33830\n",
            "8191 33831\n",
            "8194 33832\n",
            "8197 33833\n",
            "8198 33834\n",
            "8199 33835\n",
            "82 33836\n",
            "820 33837\n",
            "8200 33838\n",
            "8201 33839\n",
            "8204 33840\n",
            "8205 33841\n",
            "8207 33842\n",
            "8209 33843\n",
            "821 33844\n",
            "8210 33845\n",
            "8212 33846\n",
            "8214 33847\n",
            "8215 33848\n",
            "8216 33849\n",
            "8218 33850\n",
            "8219 33851\n",
            "8220 33852\n",
            "8221 33853\n",
            "8222 33854\n",
            "8223 33855\n",
            "8224 33856\n",
            "8226 33857\n",
            "8228 33858\n",
            "8229 33859\n",
            "8232 33860\n",
            "8233 33861\n",
            "8234 33862\n",
            "8235 33863\n",
            "8236 33864\n",
            "8237 33865\n",
            "8238 33866\n",
            "8239 33867\n",
            "824 33868\n",
            "8240 33869\n",
            "8241 33870\n",
            "8242 33871\n",
            "8243 33872\n",
            "8246 33873\n",
            "8247 33874\n",
            "8248 33875\n",
            "8249 33876\n",
            "825 33877\n",
            "8250 33878\n",
            "8251 33879\n",
            "8252 33880\n",
            "8258 33881\n",
            "8259 33882\n",
            "8260 33883\n",
            "8261 33884\n",
            "8262 33885\n",
            "8263 33886\n",
            "8265 33887\n",
            "8268 33888\n",
            "8269 33889\n",
            "827 33890\n",
            "8270 33891\n",
            "8271 33892\n",
            "8272 33893\n",
            "8273 33894\n",
            "8274 33895\n",
            "8275 33896\n",
            "8276 33897\n",
            "8277 33898\n",
            "8278 33899\n",
            "8279 33900\n",
            "828 33901\n",
            "8280 33902\n",
            "8281 33903\n",
            "8282 33904\n",
            "8283 33905\n",
            "8285 33906\n",
            "8286 33907\n",
            "8287 33908\n",
            "829 33909\n",
            "8290 33910\n",
            "8291 33911\n",
            "8292 33912\n",
            "8293 33913\n",
            "8294 33914\n",
            "8295 33915\n",
            "8299 33916\n",
            "830 33917\n",
            "8300 33918\n",
            "8301 33919\n",
            "8302 33920\n",
            "8304 33921\n",
            "8305 33922\n",
            "8306 33923\n",
            "8307 33924\n",
            "8308 33925\n",
            "8309 33926\n",
            "831 33927\n",
            "8310 33928\n",
            "8311 33929\n",
            "8312 33930\n",
            "8313 33931\n",
            "8315 33932\n",
            "8316 33933\n",
            "8318 33934\n",
            "8319 33935\n",
            "832 33936\n",
            "8320 33937\n",
            "8321 33938\n",
            "8322 33939\n",
            "8323 33940\n",
            "8324 33941\n",
            "8325 33942\n",
            "8326 33943\n",
            "8327 33944\n",
            "8329 33945\n",
            "8332 33946\n",
            "8333 33947\n",
            "8335 33948\n",
            "8336 33949\n",
            "8337 33950\n",
            "8338 33951\n",
            "8339 33952\n",
            "834 33953\n",
            "8341 33954\n",
            "8344 33955\n",
            "8345 33956\n",
            "8346 33957\n",
            "8350 33958\n",
            "8352 33959\n",
            "8353 33960\n",
            "8354 33961\n",
            "8355 33962\n",
            "8356 33963\n",
            "8359 33964\n",
            "8360 33965\n",
            "8362 33966\n",
            "8363 33967\n",
            "8366 33968\n",
            "8367 33969\n",
            "8368 33970\n",
            "8369 33971\n",
            "837 33972\n",
            "8370 33973\n",
            "8371 33974\n",
            "8372 33975\n",
            "8374 33976\n",
            "8375 33977\n",
            "8376 33978\n",
            "8377 33979\n",
            "8378 33980\n",
            "8380 33981\n",
            "8381 33982\n",
            "8382 33983\n",
            "8383 33984\n",
            "8387 33985\n",
            "8388 33986\n",
            "8389 33987\n",
            "839 33988\n",
            "8390 33989\n",
            "8391 33990\n",
            "8392 33991\n",
            "8393 33992\n",
            "8394 33993\n",
            "8395 33994\n",
            "8396 33995\n",
            "8397 33996\n",
            "8398 33997\n",
            "8399 33998\n",
            "840 33999\n",
            "8400 34000\n",
            "8402 34001\n",
            "8404 34002\n",
            "8405 34003\n",
            "8406 34004\n",
            "8407 34005\n",
            "8408 34006\n",
            "8409 34007\n",
            "841 34008\n",
            "8410 34009\n",
            "8411 34010\n",
            "8412 34011\n",
            "8413 34012\n",
            "8414 34013\n",
            "8415 34014\n",
            "8416 34015\n",
            "8417 34016\n",
            "8419 34017\n",
            "8420 34018\n",
            "8421 34019\n",
            "8422 34020\n",
            "8423 34021\n",
            "8424 34022\n",
            "8425 34023\n",
            "8426 34024\n",
            "8427 34025\n",
            "8431 34026\n",
            "8432 34027\n",
            "8434 34028\n",
            "8436 34029\n",
            "8437 34030\n",
            "8438 34031\n",
            "8439 34032\n",
            "844 34033\n",
            "8440 34034\n",
            "8441 34035\n",
            "8442 34036\n",
            "8443 34037\n",
            "8447 34038\n",
            "8449 34039\n",
            "8450 34040\n",
            "8451 34041\n",
            "8452 34042\n",
            "8453 34043\n",
            "8454 34044\n",
            "8458 34045\n",
            "8459 34046\n",
            "846 34047\n",
            "8460 34048\n",
            "8463 34049\n",
            "8465 34050\n",
            "8466 34051\n",
            "8467 34052\n",
            "847 34053\n",
            "8470 34054\n",
            "8471 34055\n",
            "8472 34056\n",
            "8474 34057\n",
            "8476 34058\n",
            "8478 34059\n",
            "8479 34060\n",
            "848 34061\n",
            "8481 34062\n",
            "8482 34063\n",
            "8483 34064\n",
            "8484 34065\n",
            "8485 34066\n",
            "8487 34067\n",
            "8488 34068\n",
            "849 34069\n",
            "8490 34070\n",
            "8492 34071\n",
            "8493 34072\n",
            "8494 34073\n",
            "8496 34074\n",
            "8497 34075\n",
            "8499 34076\n",
            "85 34077\n",
            "850 34078\n",
            "8501 34079\n",
            "8502 34080\n",
            "8503 34081\n",
            "8505 34082\n",
            "8508 34083\n",
            "8509 34084\n",
            "851 34085\n",
            "8510 34086\n",
            "8511 34087\n",
            "8514 34088\n",
            "8515 34089\n",
            "8516 34090\n",
            "8517 34091\n",
            "8518 34092\n",
            "8519 34093\n",
            "852 34094\n",
            "8521 34095\n",
            "8522 34096\n",
            "8523 34097\n",
            "8526 34098\n",
            "8527 34099\n",
            "8528 34100\n",
            "8529 34101\n",
            "853 34102\n",
            "8531 34103\n",
            "8532 34104\n",
            "8533 34105\n",
            "8535 34106\n",
            "8536 34107\n",
            "8538 34108\n",
            "8539 34109\n",
            "854 34110\n",
            "8542 34111\n",
            "8543 34112\n",
            "8544 34113\n",
            "8545 34114\n",
            "8546 34115\n",
            "8547 34116\n",
            "8548 34117\n",
            "855 34118\n",
            "8550 34119\n",
            "8551 34120\n",
            "8552 34121\n",
            "8553 34122\n",
            "8554 34123\n",
            "8555 34124\n",
            "8556 34125\n",
            "8558 34126\n",
            "8559 34127\n",
            "856 34128\n",
            "8560 34129\n",
            "8561 34130\n",
            "8563 34131\n",
            "8565 34132\n",
            "8566 34133\n",
            "8567 34134\n",
            "8569 34135\n",
            "8571 34136\n",
            "8572 34137\n",
            "8573 34138\n",
            "8574 34139\n",
            "8575 34140\n",
            "8576 34141\n",
            "8578 34142\n",
            "8580 34143\n",
            "8581 34144\n",
            "8582 34145\n",
            "8583 34146\n",
            "8584 34147\n",
            "8585 34148\n",
            "8588 34149\n",
            "8589 34150\n",
            "859 34151\n",
            "8590 34152\n",
            "8591 34153\n",
            "8593 34154\n",
            "8595 34155\n",
            "8596 34156\n",
            "8598 34157\n",
            "8599 34158\n",
            "86 34159\n",
            "860 34160\n",
            "8600 34161\n",
            "8601 34162\n",
            "8602 34163\n",
            "8603 34164\n",
            "8604 34165\n",
            "8605 34166\n",
            "8607 34167\n",
            "8608 34168\n",
            "8609 34169\n",
            "861 34170\n",
            "8610 34171\n",
            "8611 34172\n",
            "8613 34173\n",
            "8614 34174\n",
            "8615 34175\n",
            "8616 34176\n",
            "8617 34177\n",
            "8618 34178\n",
            "8619 34179\n",
            "8620 34180\n",
            "8621 34181\n",
            "8622 34182\n",
            "8623 34183\n",
            "8626 34184\n",
            "8627 34185\n",
            "8628 34186\n",
            "8630 34187\n",
            "8633 34188\n",
            "8634 34189\n",
            "8635 34190\n",
            "8636 34191\n",
            "8637 34192\n",
            "8639 34193\n",
            "864 34194\n",
            "8640 34195\n",
            "8641 34196\n",
            "8642 34197\n",
            "8644 34198\n",
            "8645 34199\n",
            "8646 34200\n",
            "8647 34201\n",
            "8648 34202\n",
            "8649 34203\n",
            "8652 34204\n",
            "8653 34205\n",
            "8654 34206\n",
            "8655 34207\n",
            "8656 34208\n",
            "8657 34209\n",
            "8658 34210\n",
            "866 34211\n",
            "8660 34212\n",
            "8661 34213\n",
            "8662 34214\n",
            "8663 34215\n",
            "8664 34216\n",
            "8666 34217\n",
            "8667 34218\n",
            "8668 34219\n",
            "867 34220\n",
            "8670 34221\n",
            "8672 34222\n",
            "8673 34223\n",
            "8674 34224\n",
            "8676 34225\n",
            "8677 34226\n",
            "8678 34227\n",
            "8679 34228\n",
            "868 34229\n",
            "8680 34230\n",
            "8682 34231\n",
            "8684 34232\n",
            "8685 34233\n",
            "8686 34234\n",
            "8687 34235\n",
            "8689 34236\n",
            "869 34237\n",
            "8690 34238\n",
            "8691 34239\n",
            "8692 34240\n",
            "8693 34241\n",
            "8696 34242\n",
            "8698 34243\n",
            "87 34244\n",
            "8700 34245\n",
            "8701 34246\n",
            "8702 34247\n",
            "8703 34248\n",
            "8706 34249\n",
            "8707 34250\n",
            "8708 34251\n",
            "8709 34252\n",
            "871 34253\n",
            "8710 34254\n",
            "8711 34255\n",
            "8713 34256\n",
            "8719 34257\n",
            "8720 34258\n",
            "8721 34259\n",
            "8722 34260\n",
            "8723 34261\n",
            "8725 34262\n",
            "8726 34263\n",
            "8728 34264\n",
            "8729 34265\n",
            "873 34266\n",
            "8730 34267\n",
            "8731 34268\n",
            "8734 34269\n",
            "8735 34270\n",
            "8737 34271\n",
            "8741 34272\n",
            "8743 34273\n",
            "8744 34274\n",
            "8746 34275\n",
            "8747 34276\n",
            "8748 34277\n",
            "8749 34278\n",
            "875 34279\n",
            "8751 34280\n",
            "8754 34281\n",
            "8755 34282\n",
            "8756 34283\n",
            "8757 34284\n",
            "8759 34285\n",
            "8761 34286\n",
            "8762 34287\n",
            "8763 34288\n",
            "8765 34289\n",
            "8768 34290\n",
            "8769 34291\n",
            "877 34292\n",
            "8770 34293\n",
            "8771 34294\n",
            "8773 34295\n",
            "8774 34296\n",
            "8775 34297\n",
            "8778 34298\n",
            "8779 34299\n",
            "878 34300\n",
            "8780 34301\n",
            "8781 34302\n",
            "8783 34303\n",
            "8786 34304\n",
            "8787 34305\n",
            "8789 34306\n",
            "879 34307\n",
            "8792 34308\n",
            "8793 34309\n",
            "8794 34310\n",
            "8795 34311\n",
            "8796 34312\n",
            "8797 34313\n",
            "8798 34314\n",
            "8799 34315\n",
            "88 34316\n",
            "880 34317\n",
            "8800 34318\n",
            "8801 34319\n",
            "8802 34320\n",
            "8803 34321\n",
            "8804 34322\n",
            "8805 34323\n",
            "8806 34324\n",
            "8807 34325\n",
            "8808 34326\n",
            "881 34327\n",
            "8810 34328\n",
            "8811 34329\n",
            "8812 34330\n",
            "8813 34331\n",
            "8814 34332\n",
            "8815 34333\n",
            "8817 34334\n",
            "8818 34335\n",
            "882 34336\n",
            "8821 34337\n",
            "8822 34338\n",
            "8823 34339\n",
            "8824 34340\n",
            "8825 34341\n",
            "8828 34342\n",
            "883 34343\n",
            "8831 34344\n",
            "8832 34345\n",
            "8834 34346\n",
            "8835 34347\n",
            "8837 34348\n",
            "8838 34349\n",
            "8839 34350\n",
            "8840 34351\n",
            "8841 34352\n",
            "8843 34353\n",
            "8845 34354\n",
            "8847 34355\n",
            "8848 34356\n",
            "8849 34357\n",
            "885 34358\n",
            "8851 34359\n",
            "8852 34360\n",
            "8853 34361\n",
            "8854 34362\n",
            "8855 34363\n",
            "8856 34364\n",
            "8857 34365\n",
            "8860 34366\n",
            "8861 34367\n",
            "8862 34368\n",
            "8863 34369\n",
            "8864 34370\n",
            "8865 34371\n",
            "8867 34372\n",
            "8868 34373\n",
            "8871 34374\n",
            "8872 34375\n",
            "8874 34376\n",
            "8875 34377\n",
            "8877 34378\n",
            "8879 34379\n",
            "888 34380\n",
            "8880 34381\n",
            "8883 34382\n",
            "8884 34383\n",
            "8885 34384\n",
            "8887 34385\n",
            "8888 34386\n",
            "889 34387\n",
            "8891 34388\n",
            "8892 34389\n",
            "8893 34390\n",
            "8897 34391\n",
            "8898 34392\n",
            "89 34393\n",
            "890 34394\n",
            "8902 34395\n",
            "8903 34396\n",
            "8904 34397\n",
            "8907 34398\n",
            "8908 34399\n",
            "8909 34400\n",
            "891 34401\n",
            "8910 34402\n",
            "8911 34403\n",
            "8912 34404\n",
            "8913 34405\n",
            "8916 34406\n",
            "8917 34407\n",
            "8918 34408\n",
            "8919 34409\n",
            "892 34410\n",
            "8920 34411\n",
            "8922 34412\n",
            "8923 34413\n",
            "8925 34414\n",
            "8926 34415\n",
            "8927 34416\n",
            "8928 34417\n",
            "8929 34418\n",
            "893 34419\n",
            "8930 34420\n",
            "8932 34421\n",
            "8933 34422\n",
            "8934 34423\n",
            "8936 34424\n",
            "8939 34425\n",
            "894 34426\n",
            "8940 34427\n",
            "8941 34428\n",
            "8942 34429\n",
            "8943 34430\n",
            "8944 34431\n",
            "8945 34432\n",
            "8946 34433\n",
            "8948 34434\n",
            "895 34435\n",
            "8950 34436\n",
            "8951 34437\n",
            "8954 34438\n",
            "8955 34439\n",
            "8956 34440\n",
            "8957 34441\n",
            "8958 34442\n",
            "8959 34443\n",
            "896 34444\n",
            "8960 34445\n",
            "8963 34446\n",
            "8966 34447\n",
            "8968 34448\n",
            "8969 34449\n",
            "897 34450\n",
            "8970 34451\n",
            "8971 34452\n",
            "8974 34453\n",
            "8976 34454\n",
            "8979 34455\n",
            "898 34456\n",
            "8980 34457\n",
            "8981 34458\n",
            "8982 34459\n",
            "8983 34460\n",
            "8984 34461\n",
            "8985 34462\n",
            "8986 34463\n",
            "8987 34464\n",
            "8989 34465\n",
            "899 34466\n",
            "8991 34467\n",
            "8992 34468\n",
            "8993 34469\n",
            "8995 34470\n",
            "8996 34471\n",
            "8999 34472\n",
            "9 34473\n",
            "90 34474\n",
            "9000 34475\n",
            "9001 34476\n",
            "9003 34477\n",
            "9004 34478\n",
            "9005 34479\n",
            "9006 34480\n",
            "9007 34481\n",
            "9008 34482\n",
            "9009 34483\n",
            "901 34484\n",
            "9010 34485\n",
            "9012 34486\n",
            "9013 34487\n",
            "9014 34488\n",
            "9015 34489\n",
            "9017 34490\n",
            "9018 34491\n",
            "9019 34492\n",
            "902 34493\n",
            "9020 34494\n",
            "9021 34495\n",
            "9022 34496\n",
            "9023 34497\n",
            "9024 34498\n",
            "9025 34499\n",
            "9028 34500\n",
            "9032 34501\n",
            "9035 34502\n",
            "9037 34503\n",
            "9038 34504\n",
            "9039 34505\n",
            "904 34506\n",
            "9040 34507\n",
            "9044 34508\n",
            "9045 34509\n",
            "9047 34510\n",
            "9049 34511\n",
            "9051 34512\n",
            "9053 34513\n",
            "9055 34514\n",
            "9056 34515\n",
            "9057 34516\n",
            "9058 34517\n",
            "906 34518\n",
            "9061 34519\n",
            "9062 34520\n",
            "9063 34521\n",
            "9064 34522\n",
            "9065 34523\n",
            "9066 34524\n",
            "9067 34525\n",
            "9069 34526\n",
            "9070 34527\n",
            "9071 34528\n",
            "9073 34529\n",
            "9074 34530\n",
            "9075 34531\n",
            "9077 34532\n",
            "9078 34533\n",
            "908 34534\n",
            "9080 34535\n",
            "9081 34536\n",
            "9082 34537\n",
            "9084 34538\n",
            "9085 34539\n",
            "9087 34540\n",
            "9088 34541\n",
            "9090 34542\n",
            "9091 34543\n",
            "9092 34544\n",
            "9094 34545\n",
            "9096 34546\n",
            "91 34547\n",
            "9101 34548\n",
            "9102 34549\n",
            "9103 34550\n",
            "9104 34551\n",
            "9105 34552\n",
            "9106 34553\n",
            "9108 34554\n",
            "911 34555\n",
            "9111 34556\n",
            "9112 34557\n",
            "9113 34558\n",
            "9115 34559\n",
            "9116 34560\n",
            "9117 34561\n",
            "9118 34562\n",
            "9119 34563\n",
            "9120 34564\n",
            "9121 34565\n",
            "9122 34566\n",
            "9123 34567\n",
            "9125 34568\n",
            "9126 34569\n",
            "9127 34570\n",
            "9128 34571\n",
            "9129 34572\n",
            "913 34573\n",
            "9130 34574\n",
            "9131 34575\n",
            "9132 34576\n",
            "9134 34577\n",
            "9135 34578\n",
            "9136 34579\n",
            "9137 34580\n",
            "9139 34581\n",
            "914 34582\n",
            "9141 34583\n",
            "9144 34584\n",
            "9146 34585\n",
            "9148 34586\n",
            "9150 34587\n",
            "9152 34588\n",
            "9153 34589\n",
            "9154 34590\n",
            "9157 34591\n",
            "9158 34592\n",
            "9159 34593\n",
            "916 34594\n",
            "9160 34595\n",
            "9161 34596\n",
            "9162 34597\n",
            "9164 34598\n",
            "9165 34599\n",
            "9167 34600\n",
            "9168 34601\n",
            "9169 34602\n",
            "917 34603\n",
            "9171 34604\n",
            "9173 34605\n",
            "9174 34606\n",
            "9175 34607\n",
            "9177 34608\n",
            "9178 34609\n",
            "9179 34610\n",
            "918 34611\n",
            "9181 34612\n",
            "9182 34613\n",
            "9183 34614\n",
            "9184 34615\n",
            "9187 34616\n",
            "9188 34617\n",
            "9189 34618\n",
            "919 34619\n",
            "9191 34620\n",
            "9192 34621\n",
            "9193 34622\n",
            "9194 34623\n",
            "9195 34624\n",
            "9199 34625\n",
            "92 34626\n",
            "9200 34627\n",
            "9202 34628\n",
            "9203 34629\n",
            "9204 34630\n",
            "9205 34631\n",
            "9209 34632\n",
            "9210 34633\n",
            "9211 34634\n",
            "9212 34635\n",
            "9215 34636\n",
            "9216 34637\n",
            "9218 34638\n",
            "922 34639\n",
            "9221 34640\n",
            "9222 34641\n",
            "9223 34642\n",
            "9224 34643\n",
            "9226 34644\n",
            "9227 34645\n",
            "9228 34646\n",
            "9230 34647\n",
            "9231 34648\n",
            "9233 34649\n",
            "9234 34650\n",
            "9235 34651\n",
            "9236 34652\n",
            "9237 34653\n",
            "9238 34654\n",
            "9239 34655\n",
            "924 34656\n",
            "9240 34657\n",
            "9241 34658\n",
            "9242 34659\n",
            "9244 34660\n",
            "9246 34661\n",
            "9248 34662\n",
            "925 34663\n",
            "9250 34664\n",
            "9251 34665\n",
            "9252 34666\n",
            "9253 34667\n",
            "9255 34668\n",
            "9256 34669\n",
            "9257 34670\n",
            "9258 34671\n",
            "9259 34672\n",
            "926 34673\n",
            "9260 34674\n",
            "9262 34675\n",
            "9264 34676\n",
            "9265 34677\n",
            "9266 34678\n",
            "9268 34679\n",
            "9269 34680\n",
            "9271 34681\n",
            "9272 34682\n",
            "9274 34683\n",
            "9275 34684\n",
            "9276 34685\n",
            "9277 34686\n",
            "9278 34687\n",
            "9279 34688\n",
            "9281 34689\n",
            "9285 34690\n",
            "9287 34691\n",
            "9288 34692\n",
            "9289 34693\n",
            "929 34694\n",
            "9290 34695\n",
            "9291 34696\n",
            "9292 34697\n",
            "9293 34698\n",
            "9294 34699\n",
            "9295 34700\n",
            "9297 34701\n",
            "9298 34702\n",
            "9299 34703\n",
            "93 34704\n",
            "930 34705\n",
            "9300 34706\n",
            "9301 34707\n",
            "9303 34708\n",
            "9305 34709\n",
            "9307 34710\n",
            "9309 34711\n",
            "931 34712\n",
            "9311 34713\n",
            "9312 34714\n",
            "9313 34715\n",
            "9315 34716\n",
            "9317 34717\n",
            "9318 34718\n",
            "9319 34719\n",
            "932 34720\n",
            "9321 34721\n",
            "9322 34722\n",
            "9324 34723\n",
            "9325 34724\n",
            "9326 34725\n",
            "9327 34726\n",
            "9328 34727\n",
            "9330 34728\n",
            "9331 34729\n",
            "9333 34730\n",
            "9334 34731\n",
            "9335 34732\n",
            "9337 34733\n",
            "9338 34734\n",
            "9339 34735\n",
            "934 34736\n",
            "9340 34737\n",
            "9344 34738\n",
            "9345 34739\n",
            "9346 34740\n",
            "9347 34741\n",
            "9348 34742\n",
            "9349 34743\n",
            "9353 34744\n",
            "9355 34745\n",
            "9356 34746\n",
            "9358 34747\n",
            "9360 34748\n",
            "9361 34749\n",
            "9363 34750\n",
            "9365 34751\n",
            "9366 34752\n",
            "9368 34753\n",
            "9369 34754\n",
            "937 34755\n",
            "9371 34756\n",
            "9373 34757\n",
            "9376 34758\n",
            "9377 34759\n",
            "9378 34760\n",
            "9379 34761\n",
            "9380 34762\n",
            "9381 34763\n",
            "9384 34764\n",
            "9386 34765\n",
            "9388 34766\n",
            "939 34767\n",
            "9390 34768\n",
            "9391 34769\n",
            "9392 34770\n",
            "9394 34771\n",
            "9397 34772\n",
            "94 34773\n",
            "940 34774\n",
            "9400 34775\n",
            "9401 34776\n",
            "9402 34777\n",
            "9405 34778\n",
            "9406 34779\n",
            "9408 34780\n",
            "941 34781\n",
            "9410 34782\n",
            "9411 34783\n",
            "9412 34784\n",
            "9419 34785\n",
            "942 34786\n",
            "9421 34787\n",
            "9422 34788\n",
            "9423 34789\n",
            "9424 34790\n",
            "9425 34791\n",
            "9427 34792\n",
            "943 34793\n",
            "9430 34794\n",
            "9431 34795\n",
            "9432 34796\n",
            "9434 34797\n",
            "9435 34798\n",
            "9436 34799\n",
            "9438 34800\n",
            "9439 34801\n",
            "944 34802\n",
            "9440 34803\n",
            "9442 34804\n",
            "9443 34805\n",
            "9445 34806\n",
            "9447 34807\n",
            "9449 34808\n",
            "945 34809\n",
            "9450 34810\n",
            "9452 34811\n",
            "9453 34812\n",
            "9455 34813\n",
            "9456 34814\n",
            "9457 34815\n",
            "9459 34816\n",
            "946 34817\n",
            "9461 34818\n",
            "9462 34819\n",
            "9466 34820\n",
            "9469 34821\n",
            "947 34822\n",
            "9470 34823\n",
            "9471 34824\n",
            "9472 34825\n",
            "9475 34826\n",
            "9476 34827\n",
            "9477 34828\n",
            "9478 34829\n",
            "9479 34830\n",
            "9480 34831\n",
            "9481 34832\n",
            "9482 34833\n",
            "9483 34834\n",
            "9487 34835\n",
            "9488 34836\n",
            "9489 34837\n",
            "9493 34838\n",
            "9494 34839\n",
            "9495 34840\n",
            "9497 34841\n",
            "9499 34842\n",
            "95 34843\n",
            "950 34844\n",
            "9500 34845\n",
            "9501 34846\n",
            "9502 34847\n",
            "9503 34848\n",
            "9504 34849\n",
            "9506 34850\n",
            "9508 34851\n",
            "9509 34852\n",
            "951 34853\n",
            "9510 34854\n",
            "9513 34855\n",
            "9514 34856\n",
            "9515 34857\n",
            "9516 34858\n",
            "9517 34859\n",
            "9519 34860\n",
            "952 34861\n",
            "9520 34862\n",
            "9521 34863\n",
            "9522 34864\n",
            "9524 34865\n",
            "9525 34866\n",
            "9526 34867\n",
            "9527 34868\n",
            "9528 34869\n",
            "9529 34870\n",
            "9531 34871\n",
            "9532 34872\n",
            "9533 34873\n",
            "9535 34874\n",
            "9537 34875\n",
            "9538 34876\n",
            "9539 34877\n",
            "9540 34878\n",
            "9541 34879\n",
            "9544 34880\n",
            "9545 34881\n",
            "9548 34882\n",
            "9549 34883\n",
            "955 34884\n",
            "9550 34885\n",
            "9552 34886\n",
            "9553 34887\n",
            "9555 34888\n",
            "9558 34889\n",
            "956 34890\n",
            "9560 34891\n",
            "9561 34892\n",
            "9563 34893\n",
            "9564 34894\n",
            "9565 34895\n",
            "9567 34896\n",
            "9568 34897\n",
            "9569 34898\n",
            "9572 34899\n",
            "9573 34900\n",
            "9575 34901\n",
            "9576 34902\n",
            "9577 34903\n",
            "9578 34904\n",
            "9579 34905\n",
            "958 34906\n",
            "9582 34907\n",
            "9584 34908\n",
            "9585 34909\n",
            "9587 34910\n",
            "9588 34911\n",
            "9589 34912\n",
            "959 34913\n",
            "9590 34914\n",
            "9591 34915\n",
            "9592 34916\n",
            "9594 34917\n",
            "9595 34918\n",
            "9596 34919\n",
            "9598 34920\n",
            "9599 34921\n",
            "96 34922\n",
            "960 34923\n",
            "9600 34924\n",
            "9601 34925\n",
            "9602 34926\n",
            "9603 34927\n",
            "9605 34928\n",
            "9607 34929\n",
            "9608 34930\n",
            "9609 34931\n",
            "961 34932\n",
            "9610 34933\n",
            "9611 34934\n",
            "9612 34935\n",
            "9614 34936\n",
            "9615 34937\n",
            "9617 34938\n",
            "9618 34939\n",
            "962 34940\n",
            "9620 34941\n",
            "9621 34942\n",
            "9623 34943\n",
            "9624 34944\n",
            "9625 34945\n",
            "9626 34946\n",
            "9627 34947\n",
            "963 34948\n",
            "9630 34949\n",
            "9631 34950\n",
            "9633 34951\n",
            "9635 34952\n",
            "9636 34953\n",
            "9637 34954\n",
            "9639 34955\n",
            "9640 34956\n",
            "9642 34957\n",
            "9643 34958\n",
            "9644 34959\n",
            "9645 34960\n",
            "9646 34961\n",
            "9647 34962\n",
            "9648 34963\n",
            "9649 34964\n",
            "965 34965\n",
            "9650 34966\n",
            "9652 34967\n",
            "9653 34968\n",
            "9655 34969\n",
            "9657 34970\n",
            "9658 34971\n",
            "966 34972\n",
            "9661 34973\n",
            "9662 34974\n",
            "9664 34975\n",
            "9665 34976\n",
            "9666 34977\n",
            "9667 34978\n",
            "9668 34979\n",
            "9669 34980\n",
            "9671 34981\n",
            "9672 34982\n",
            "9673 34983\n",
            "9674 34984\n",
            "9676 34985\n",
            "9678 34986\n",
            "968 34987\n",
            "9680 34988\n",
            "9681 34989\n",
            "9684 34990\n",
            "9685 34991\n",
            "9686 34992\n",
            "9687 34993\n",
            "9688 34994\n",
            "9689 34995\n",
            "969 34996\n",
            "9690 34997\n",
            "9691 34998\n",
            "9692 34999\n",
            "9693 35000\n",
            "9694 35001\n",
            "9695 35002\n",
            "9696 35003\n",
            "9698 35004\n",
            "9699 35005\n",
            "97 35006\n",
            "9701 35007\n",
            "9702 35008\n",
            "9703 35009\n",
            "9704 35010\n",
            "9705 35011\n",
            "9706 35012\n",
            "9707 35013\n",
            "9708 35014\n",
            "971 35015\n",
            "9710 35016\n",
            "9712 35017\n",
            "9713 35018\n",
            "9714 35019\n",
            "9715 35020\n",
            "9716 35021\n",
            "9717 35022\n",
            "9719 35023\n",
            "972 35024\n",
            "9721 35025\n",
            "9724 35026\n",
            "9726 35027\n",
            "9727 35028\n",
            "9728 35029\n",
            "9729 35030\n",
            "973 35031\n",
            "9730 35032\n",
            "9731 35033\n",
            "9732 35034\n",
            "9735 35035\n",
            "9736 35036\n",
            "9737 35037\n",
            "9738 35038\n",
            "9739 35039\n",
            "974 35040\n",
            "9740 35041\n",
            "9741 35042\n",
            "9742 35043\n",
            "9743 35044\n",
            "9745 35045\n",
            "9746 35046\n",
            "9747 35047\n",
            "9749 35048\n",
            "9750 35049\n",
            "9753 35050\n",
            "9754 35051\n",
            "9756 35052\n",
            "9757 35053\n",
            "9759 35054\n",
            "976 35055\n",
            "9760 35056\n",
            "9761 35057\n",
            "9765 35058\n",
            "9766 35059\n",
            "9767 35060\n",
            "9768 35061\n",
            "977 35062\n",
            "9771 35063\n",
            "9772 35064\n",
            "9773 35065\n",
            "9775 35066\n",
            "9776 35067\n",
            "9777 35068\n",
            "9779 35069\n",
            "978 35070\n",
            "9780 35071\n",
            "9781 35072\n",
            "9782 35073\n",
            "9783 35074\n",
            "9784 35075\n",
            "9785 35076\n",
            "9786 35077\n",
            "9787 35078\n",
            "9788 35079\n",
            "979 35080\n",
            "9790 35081\n",
            "9794 35082\n",
            "9795 35083\n",
            "9796 35084\n",
            "9799 35085\n",
            "98 35086\n",
            "980 35087\n",
            "9803 35088\n",
            "9804 35089\n",
            "9805 35090\n",
            "9806 35091\n",
            "9807 35092\n",
            "9808 35093\n",
            "981 35094\n",
            "9812 35095\n",
            "9813 35096\n",
            "9815 35097\n",
            "9816 35098\n",
            "9817 35099\n",
            "9818 35100\n",
            "9819 35101\n",
            "9820 35102\n",
            "9823 35103\n",
            "9824 35104\n",
            "9825 35105\n",
            "9826 35106\n",
            "9827 35107\n",
            "9828 35108\n",
            "9829 35109\n",
            "983 35110\n",
            "9830 35111\n",
            "9832 35112\n",
            "9833 35113\n",
            "9835 35114\n",
            "9838 35115\n",
            "9840 35116\n",
            "9841 35117\n",
            "9842 35118\n",
            "9843 35119\n",
            "9844 35120\n",
            "9846 35121\n",
            "9848 35122\n",
            "9850 35123\n",
            "9852 35124\n",
            "9853 35125\n",
            "9854 35126\n",
            "9858 35127\n",
            "9859 35128\n",
            "986 35129\n",
            "9860 35130\n",
            "9862 35131\n",
            "9864 35132\n",
            "9865 35133\n",
            "9866 35134\n",
            "9867 35135\n",
            "9868 35136\n",
            "9869 35137\n",
            "987 35138\n",
            "9871 35139\n",
            "9872 35140\n",
            "9873 35141\n",
            "9874 35142\n",
            "9876 35143\n",
            "9877 35144\n",
            "9878 35145\n",
            "9879 35146\n",
            "988 35147\n",
            "9880 35148\n",
            "9881 35149\n",
            "9882 35150\n",
            "9883 35151\n",
            "9884 35152\n",
            "9885 35153\n",
            "9886 35154\n",
            "9887 35155\n",
            "9889 35156\n",
            "989 35157\n",
            "9890 35158\n",
            "9892 35159\n",
            "9894 35160\n",
            "9895 35161\n",
            "9896 35162\n",
            "9897 35163\n",
            "9898 35164\n",
            "9899 35165\n",
            "990 35166\n",
            "9900 35167\n",
            "9901 35168\n",
            "9903 35169\n",
            "9904 35170\n",
            "9905 35171\n",
            "9906 35172\n",
            "9907 35173\n",
            "9908 35174\n",
            "9909 35175\n",
            "9910 35176\n",
            "9911 35177\n",
            "9912 35178\n",
            "9914 35179\n",
            "9919 35180\n",
            "9920 35181\n",
            "9921 35182\n",
            "9923 35183\n",
            "9924 35184\n",
            "9927 35185\n",
            "9928 35186\n",
            "9929 35187\n",
            "993 35188\n",
            "9930 35189\n",
            "9931 35190\n",
            "9932 35191\n",
            "9933 35192\n",
            "9935 35193\n",
            "9937 35194\n",
            "994 35195\n",
            "9940 35196\n",
            "9941 35197\n",
            "9942 35198\n",
            "9945 35199\n",
            "9946 35200\n",
            "9948 35201\n",
            "9949 35202\n",
            "995 35203\n",
            "9950 35204\n",
            "9952 35205\n",
            "9955 35206\n",
            "9956 35207\n",
            "9957 35208\n",
            "9959 35209\n",
            "996 35210\n",
            "9961 35211\n",
            "9962 35212\n",
            "9964 35213\n",
            "9966 35214\n",
            "9969 35215\n",
            "9971 35216\n",
            "9974 35217\n",
            "9976 35218\n",
            "9978 35219\n",
            "9979 35220\n",
            "9981 35221\n",
            "9982 35222\n",
            "9984 35223\n",
            "9986 35224\n",
            "9987 35225\n",
            "9988 35226\n",
            "999 35227\n",
            "9990 35228\n",
            "9991 35229\n",
            "9994 35230\n",
            "9995 35231\n",
            "9996 35232\n",
            "9997 35233\n",
            "9998 35234\n",
            "9999 35235\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E-h-DBeSsP8v",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RsbFZ9-qzp8E",
        "colab_type": "code",
        "outputId": "2cbf9099-4837-4aca-fa0b-93d3cd587eb7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        }
      },
      "source": [
        "TEXT.build_vocab(train_data_a,\n",
        "                 max_size = 50000,\n",
        "                 vectors = 'glove.twitter.27B.200d',\n",
        "                 unk_init = torch.Tensor.normal_\n",
        "                 )\n",
        "\n",
        "# TEXT.build_vocab(train_data_a,\n",
        "#                 #  max_size = 25000,\n",
        "#                 #  vectors = 'glove.twitter.27B.200d',\n",
        "#                 #  unk_init = torch.Tensor.normal_\n",
        "#                  )\n",
        "\n",
        "\n",
        "tot = 0\n",
        "for batch in train_iterator:\n",
        "  # print(batch.batch_size)\n",
        "  tot += batch.batch_size\n",
        "print(tot)\n",
        "\n",
        "# print(len(train_data_a))\n",
        "\n",
        "print(TEXT.vocab.freqs.most_common(100))\n",
        "print(TEXT.vocab.itos[:10])"
      ],
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "35234\n",
            "[('.', 32764), ('the', 29361), ('\"', 24950), ('to', 16367), (',', 13621), ('<user>', 13271), ('i', 13165), ('in', 10657), ('<url>', 10320), ('on', 10154), ('a', 10085), ('<repeated>', 9926), ('!', 9828), ('and', 9810), ('<allcaps>', 9579), ('</allcaps>', 9579), ('<hashtag>', 9003), ('</hashtag>', 9003), ('<number>', 8913), (\"'\", 8826), ('of', 8446), ('\\\\', 8063), ('is', 7752), ('for', 7718), ('it', 7195), ('you', 7028), ('s', 6767), ('-', 6043), ('with', 5884), ('tomorrow', 5754), ('be', 5721), (':', 5403), ('at', 5349), ('may', 5180), ('not', 5049), ('?', 4923), ('that', 4037), ('have', 4004), ('will', 3748), ('my', 3630), ('th', 3559), ('1', 3407), ('u002c', 3397), ('this', 3325), ('<date>', 3287), ('day', 3130), ('but', 3100), ('he', 3094), ('just', 3082), ('was', 2755), ('are', 2636), ('so', 2430), ('me', 2425), ('we', 2392), ('night', 2347), ('going', 2344), ('out', 2322), ('&', 2314), ('if', 2297), ('2', 2267), ('st', 2262), ('all', 2258), ('am', 2223), ('see', 2181), ('friday', 2152), ('can', 2145), ('from', 2094), ('sunday', 2091), ('do', 2038), ('up', 2005), ('like', 1952), ('time', 1927), ('about', 1918), ('(', 1890), ('as', 1877), (')', 1856), ('get', 1842), ('saturday', 1653), ('go', 1610), ('one', 1572), ('his', 1563), ('by', 1551), ('new', 1522), ('nd', 1487), ('3', 1477), ('what', 1401), ('monday', 1395), ('now', 1390), ('u2019s', 1374), ('/', 1358), ('or', 1353), ('game', 1351), ('they', 1325), ('your', 1309), ('when', 1299), ('has', 1287), ('today', 1251), ('good', 1237), ('<time>', 1221), ('no', 1173)]\n",
            "['<unk>', '<pad>', '.', 'the', '\"', 'to', ',', '<user>', 'i', 'in']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZNKTYypGuVTw",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "8d9213cf-a0c0-45c9-f26d-5c42f5ec24d3"
      },
      "source": [
        "for batch in train_iterator:\n",
        "  i = int(ROW_NUM.vocab.itos[int(batch.row_num[0][0])])\n",
        "  print(task_a_train_df.iloc[i].text)\n",
        "  for elm in torch.transpose(batch.text[0], 0, 1)[0].detach().cpu().clone().numpy().transpose():\n",
        "    print(TEXT.vocab.itos[int(elm)], sep=' ', end=' ')\n",
        "  # print(batch.text)\n",
        "  break\n",
        "  "
      ],
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\"You'd assume the Mets would love to have David Wright back by next weekend in Colorado, worst case scenario Monday in Philadelphia.\"\n",
            "\" you ' d assume the mets would love to have david wright back by next weekend in colorado , worst case scenario monday in philadelphia . \" "
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qViSHNtK0Dye",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "8c1f6ae4-1443-4428-afe6-3ebebf18f51b"
      },
      "source": [
        "print(TEXT.vocab.freqs.most_common(20))\n",
        "print(TEXT.vocab.itos[:10])"
      ],
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[('.', 32764), ('the', 29361), ('\"', 24950), ('to', 16367), (',', 13621), ('<user>', 13271), ('i', 13165), ('in', 10657), ('<url>', 10320), ('on', 10154), ('a', 10085), ('<repeated>', 9926), ('!', 9828), ('and', 9810), ('<allcaps>', 9579), ('</allcaps>', 9579), ('<hashtag>', 9003), ('</hashtag>', 9003), ('<number>', 8913), (\"'\", 8826)]\n",
            "['<unk>', '<pad>', '.', 'the', '\"', 'to', ',', '<user>', 'i', 'in']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m2ErzS6NuE4O",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "e51a2159-aa34-4fbb-8e03-91ff98bc15b2"
      },
      "source": [
        "print(f\"Unique tokens in TEXT vocabulary: {len(TEXT.vocab)}\")\n",
        "print(f\"Unique tokens in LABEL vocabulary: {len(SENTIMENT.vocab)}\")"
      ],
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Unique tokens in TEXT vocabulary: 33407\n",
            "Unique tokens in LABEL vocabulary: 3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wpIHw_3YdSAn",
        "colab_type": "text"
      },
      "source": [
        "## Neural Network"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2TsmpHiydeyr",
        "colab_type": "text"
      },
      "source": [
        "three layers:\n",
        "1. embedding layer (transform one-hot encoding vector into a dense embedding vector)\n",
        "2. RNN\n",
        "3. linear layer (output)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xo_SPYGZdWuq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import torch.nn as nn\n",
        "\n",
        "class RNN(nn.Module):\n",
        "  def __init__(self, vocab_size, embedding_dim, hidden_dim, output_dim, n_layers,\n",
        "               bidirectional, dropout, pad_idx):\n",
        "    super().__init__()\n",
        "    self.embedding = nn.Embedding(vocab_size, embedding_dim, padding_idx=pad_idx)\n",
        "    # self.rnn = nn.RNN(embedding_dim, hidden_dim)\n",
        "    self.rnn = nn.LSTM(embedding_dim,\n",
        "                       hidden_dim,\n",
        "                       num_layers=n_layers,\n",
        "                       bidirectional=bidirectional,\n",
        "                       dropout=dropout\n",
        "                       )\n",
        "    self.fully_connected = nn.Linear(hidden_dim*2, output_dim)\n",
        "    self.dropout = nn.Dropout(dropout)\n",
        "\n",
        "  def forward(self, text, text_length):\n",
        "    # text dimention is [sentence len, batch size]\n",
        "    \n",
        "    # embedded dimention is [sentence len, batch size, embedding_dim]\n",
        "    embedded = self.dropout(self.embedding(text))\n",
        "\n",
        "    # pack the sequence\n",
        "    packed_embedded = nn.utils.rnn.pack_padded_sequence(embedded, text_length)\n",
        "    # print('packed_embedded:')\n",
        "    # print(packed_embedded)\n",
        "    packet_output, (hidden, cell) = self.rnn(packed_embedded)\n",
        "\n",
        "    # unpack the sequence\n",
        "    output, output_length = nn.utils.rnn.pad_packed_sequence(packet_output)\n",
        "\n",
        "    # output dimention is [sentence len, batch size, hidden dim * num directions]\n",
        "    # output over padding tokens are zero tensors\n",
        "\n",
        "    # hidden dimension is [num layers*num directions, batch size, hidden dim]\n",
        "    # cell dimension is also [num layers*num directions, batch size, hidden dim]\n",
        "\n",
        "    #concat the final forward (hidden[-2,:,:]) and backward (hidden[-1,:,:]) hidden layers\n",
        "    #and apply dropout\n",
        "\n",
        "    # hidden dimension is [batch size, hid dim*num directions]\n",
        "    hidden = self.dropout(torch.cat((hidden[-2,:,:], hidden[-1,:,:]), dim=1))\n",
        "    \n",
        "    return self.fully_connected(hidden)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JP20cupMd1v5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "INPUT_DIM = len(TEXT.vocab)\n",
        "EMBEDDING_DIM = 200\n",
        "HIDDEN_DIM = 256\n",
        "OUTPUT_DIM = len(SENTIMENT.vocab)\n",
        "N_LAYERS = 2\n",
        "BIDIRECTIONAL = True\n",
        "DROPOUT = 0.5\n",
        "PAD_IDX = TEXT.vocab.stoi[TEXT.pad_token]\n",
        "\n",
        "# model = RNN(INPUT_DIM, EMBEDDING_DIM, HIDDEN_DIM, OUTPUT_DIM)\n",
        "model = RNN(INPUT_DIM,\n",
        "            EMBEDDING_DIM,\n",
        "            HIDDEN_DIM,\n",
        "            OUTPUT_DIM,\n",
        "            N_LAYERS,\n",
        "            BIDIRECTIONAL,\n",
        "            DROPOUT,\n",
        "            PAD_IDX,\n",
        "            )"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b5yibg4B0hwG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        },
        "outputId": "13c7b29b-2b10-4a64-95ca-bf3461542094"
      },
      "source": [
        "! pip install torchviz"
      ],
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: torchviz in /usr/local/lib/python3.6/dist-packages (0.0.1)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.6/dist-packages (from torchviz) (1.4.0)\n",
            "Requirement already satisfied: graphviz in /usr/local/lib/python3.6/dist-packages (from torchviz) (0.10.1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eWbAXYOsr68C",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "outputId": "44c91fdc-6ef0-422c-e355-d09f62324294"
      },
      "source": [
        "def count_model_params(model):\n",
        "  return sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
        "  # n_params = sum(p.numel() for p in model.parameters)\n",
        "  \n",
        "print(model.parameters)\n",
        "print(count_model_params(model))\n"
      ],
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<bound method Module.parameters of RNN(\n",
            "  (embedding): Embedding(33407, 200, padding_idx=1)\n",
            "  (rnn): LSTM(200, 256, num_layers=2, dropout=0.5, bidirectional=True)\n",
            "  (fully_connected): Linear(in_features=512, out_features=3, bias=True)\n",
            "  (dropout): Dropout(p=0.5, inplace=False)\n",
            ")>\n",
            "9197883\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6xSZq3wUfzNO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "ec81014d-94aa-4b2b-cb92-0f26c5bc9ad9"
      },
      "source": [
        "pretrained_embeddings = TEXT.vocab.vectors\n",
        "print(pretrained_embeddings.shape)"
      ],
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "torch.Size([33407, 200])\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uj6qu_exf-MR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "outputId": "11f56eab-8e00-4198-9971-e4754253f659"
      },
      "source": [
        "# replace the initial weights of the embedding layer with the pretrained embeddings\n",
        "model.embedding.weight.data.copy_(pretrained_embeddings)"
      ],
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[-4.5453e-01, -4.9595e-01,  1.0030e+00,  ...,  1.1656e+00,\n",
              "          1.0039e+00, -4.0569e-01],\n",
              "        [ 5.6616e-01,  2.0120e-01,  7.9746e-01,  ...,  5.7076e-01,\n",
              "          7.0184e-01, -3.9804e-04],\n",
              "        [ 3.5132e-01,  5.6084e-04, -2.1488e-01,  ...,  3.6684e-02,\n",
              "         -3.7206e-02,  8.5384e-01],\n",
              "        ...,\n",
              "        [ 2.8658e-01,  1.7222e+00,  3.0006e-01,  ...,  4.8576e-02,\n",
              "          2.9689e-02, -1.3711e+00],\n",
              "        [-9.9242e-01,  1.5290e+00,  5.9232e-01,  ...,  1.6047e+00,\n",
              "         -2.5662e-01, -2.7853e-02],\n",
              "        [-1.5557e+00,  3.7041e-01, -1.2237e+00,  ..., -2.8379e-01,\n",
              "         -9.8396e-01,  1.1505e-01]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SQY4ndIigXrv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "outputId": "4ea5f1e8-d3f1-4c3e-fd2c-d54786b99140"
      },
      "source": [
        "# initialise UNK and PAD tokens to zeros\n",
        "UNK_IDX = TEXT.vocab.stoi[TEXT.unk_token]\n",
        "PAD_IDX = TEXT.vocab.stoi[TEXT.pad_token]\n",
        "\n",
        "model.embedding.weight.data[UNK_IDX] = torch.zeros(EMBEDDING_DIM)\n",
        "model.embedding.weight.data[PAD_IDX] = torch.zeros(EMBEDDING_DIM)\n",
        "\n",
        "print(model.embedding.weight.data)"
      ],
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tensor([[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
            "          0.0000e+00,  0.0000e+00],\n",
            "        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n",
            "          0.0000e+00,  0.0000e+00],\n",
            "        [ 3.5132e-01,  5.6084e-04, -2.1488e-01,  ...,  3.6684e-02,\n",
            "         -3.7206e-02,  8.5384e-01],\n",
            "        ...,\n",
            "        [ 2.8658e-01,  1.7222e+00,  3.0006e-01,  ...,  4.8576e-02,\n",
            "          2.9689e-02, -1.3711e+00],\n",
            "        [-9.9242e-01,  1.5290e+00,  5.9232e-01,  ...,  1.6047e+00,\n",
            "         -2.5662e-01, -2.7853e-02],\n",
            "        [-1.5557e+00,  3.7041e-01, -1.2237e+00,  ..., -2.8379e-01,\n",
            "         -9.8396e-01,  1.1505e-01]])\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gL4SuaCit_Xq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 340
        },
        "outputId": "bcd6a377-b1b9-4d60-8c45-dc6074225e40"
      },
      "source": [
        "for p in model.parameters():\n",
        "  # print(p)\n",
        "  print(p.numel())"
      ],
      "execution_count": 138,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "6681400\n",
            "204800\n",
            "262144\n",
            "1024\n",
            "1024\n",
            "204800\n",
            "262144\n",
            "1024\n",
            "1024\n",
            "524288\n",
            "262144\n",
            "1024\n",
            "1024\n",
            "524288\n",
            "262144\n",
            "1024\n",
            "1024\n",
            "1536\n",
            "3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FkG8MGZMvTLi",
        "colab_type": "text"
      },
      "source": [
        "## Train the Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lAvE0iDxvVDP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import torch.optim as optim\n",
        "\n",
        "optimiser = optim.Adam(model.parameters())"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fS3UcTyJwYuQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "criterion = nn.CrossEntropyLoss()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4fgE2l3VwdkG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "38484c20-9259-4467-dc6f-ecd0f10cc1b2"
      },
      "source": [
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "print(device)\n",
        "model = model.to(device)\n",
        "criterion = criterion.to(device)"
      ],
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "cuda\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_5cEu9fAwixJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# def binary_accuracy(preds, y):\n",
        "#     \"\"\"\n",
        "#     Returns accuracy per batch, i.e. if you get 8/10 right, this returns 0.8, NOT 8\n",
        "#     \"\"\"\n",
        "\n",
        "#     #round predictions to the closest integer\n",
        "#     rounded_preds = torch.round(torch.sigmoid(preds))\n",
        "#     rounded_preds = torch.round(preds)\n",
        "#     correct = (rounded_preds == y).float() #convert into float for division\n",
        "#     acc = correct.sum() / len(correct)\n",
        "#     return acc\n",
        "\n",
        "# def categorical_accuracy(preds, y):\n",
        "#   \"\"\"\n",
        "#   Returns accuracy per batch, i.e. if you get 8/10 right, this returns 0.8, NOT 8\n",
        "#   \"\"\"\n",
        "#   max_preds = preds.argmax(dim = 1, keepdim = True) # get the index of the max probability\n",
        "#   correct = max_preds.squeeze(1).eq(y)\n",
        "#   return correct.sum() / torch.FloatTensor([y.shape[0]])\n",
        "\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score, recall_score, precision_score, f1_score\n",
        "def calculate_performance(y, preds):\n",
        "  # get the index of the max probability \n",
        "  max_preds = preds.argmax(dim = 1, keepdim = True).squeeze(1)\n",
        "  max_preds = max_preds.detach().cpu().clone().numpy()\n",
        "  \n",
        "  y = y.detach().cpu().clone().numpy()\n",
        "\n",
        "\n",
        "  # max_samples = 2\n",
        "  # for i in range(len(y)-1):\n",
        "  #   if max_preds[i] != y[i]:\n",
        "  #     print('pred=', SENTIMENT.vocab.itos[max_preds[i]], ' actual=', SENTIMENT.vocab.itos[y[i]], end=' ')\n",
        "  #     for elm in torch.transpose(texts, 0, 1)[0].detach().cpu().clone().numpy().transpose():\n",
        "  #       print(TEXT.vocab.itos[int(elm)], sep=' ', end=' ')\n",
        "  #     print\n",
        "  #     max_samples -= 1\n",
        "  #   if max_samples <= 0:\n",
        "  #     break\n",
        "\n",
        "  acc = accuracy_score(y, max_preds)\n",
        "  rec = recall_score(y, max_preds, average='macro')\n",
        "  prec= precision_score(y, max_preds, average='macro')\n",
        "  f1  = f1_score(y, max_preds, average='macro')\n",
        "  return acc, rec, prec, f1\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b0wGJ4rww7Fj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "\n",
        "def train(model, iterator, optimizer, criterion):\n",
        "    \n",
        "    epoch_loss = 0\n",
        "    epoch_acc = 0\n",
        "    epoch_rec = 0\n",
        "    epoch_prec = 0\n",
        "    epoch_f1 = 0\n",
        "\n",
        "    model.train()\n",
        "    \n",
        "    for batch in iterator:\n",
        "        \n",
        "        optimizer.zero_grad()\n",
        "                \n",
        "        text, text_length = batch.text\n",
        "        # predictions = model(text).squeeze(1)\n",
        "        predictions = model(text, text_length).squeeze(1)\n",
        "        \n",
        "        \n",
        "        loss = criterion(predictions, batch.sentiment.long())\n",
        "        \n",
        "        # acc = categorical_accuracy(predictions, batch.sentiment)\n",
        "        acc, rec, prec, f1 = calculate_performance(batch.sentiment, predictions)\n",
        "        # print(acc, rec, prec, f1)\n",
        "        \n",
        "        loss.backward()\n",
        "        \n",
        "        optimizer.step()\n",
        "        \n",
        "        epoch_loss += loss.item()\n",
        "        epoch_acc += acc.item()\n",
        "        epoch_rec += rec.item()\n",
        "        epoch_prec += prec.item()\n",
        "        epoch_f1 += f1.item()\n",
        "\n",
        "        avg_loss = epoch_loss / len(iterator)\n",
        "        avg_acc = epoch_acc / len(iterator)\n",
        "        avg_rec = epoch_rec / len(iterator)\n",
        "        avg_prec = epoch_prec / len(iterator)\n",
        "        avg_f1 = epoch_f1 / len(iterator)\n",
        "    return avg_loss, avg_acc, avg_rec, avg_prec, avg_f1"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "41SqIzKvJUdF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def evaluate(model, iterator, criterion):\n",
        "    \n",
        "    epoch_loss = 0\n",
        "    epoch_acc = 0\n",
        "    epoch_rec = 0\n",
        "    epoch_prec = 0\n",
        "    epoch_f1 = 0\n",
        "    \n",
        "    model.eval()\n",
        "    \n",
        "    actual_file = open('actual.txt', 'w')\n",
        "    pred_file = open('pred.txt', 'w')\n",
        "    with torch.no_grad():\n",
        "    \n",
        "        for batch in iterator:\n",
        "            text, text_length = batch.text\n",
        "            predictions = model(text, text_length).squeeze(1)\n",
        "            actuals = batch.sentiment\n",
        "            for elm in actuals:\n",
        "              actual_file.write(str(elm.item()) + '\\n')\n",
        "            \n",
        "            preds = predictions.argmax(dim = 1, keepdim = True).squeeze(1)\n",
        "            for elm in preds:\n",
        "              pred_file.write(str(elm.item()) + '\\n')\n",
        " \n",
        "            # loss = criterion(predictions, batch.sentiment.long())\n",
        "            loss = criterion(predictions, batch.sentiment.long())\n",
        "            \n",
        "            # acc = categorical_accuracy(predictions, batch.sentiment)\n",
        "            # acc, rec, prec, f1 = calculate_performance(batch.sentiment, predictions)\n",
        "            acc, rec, prec, f1 = calculate_performance(batch.sentiment, predictions)\n",
        "            # print(acc, rec, prec, f1)\n",
        "\n",
        "            epoch_loss += loss.item()\n",
        "            epoch_acc += acc.item()\n",
        "            epoch_rec += rec.item()\n",
        "            epoch_prec += prec.item()\n",
        "            epoch_f1 += f1.item()\n",
        "\n",
        "            avg_loss = epoch_loss / len(iterator)\n",
        "            avg_acc = epoch_acc / len(iterator)\n",
        "            avg_rec = epoch_rec / len(iterator)\n",
        "            avg_prec = epoch_prec / len(iterator)\n",
        "            avg_f1 = epoch_f1 / len(iterator)\n",
        "    return avg_loss, avg_acc, avg_rec, avg_prec, avg_f1"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b0JpAUV-xYY2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import time\n",
        "\n",
        "def epoch_time(start_time, end_time):\n",
        "    elapsed_time = end_time - start_time\n",
        "    elapsed_mins = int(elapsed_time / 60)\n",
        "    elapsed_secs = int(elapsed_time - (elapsed_mins * 60))\n",
        "    return elapsed_mins, elapsed_secs"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8xORR7LVxiro",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "outputId": "71c1639b-d3fc-4088-d1a4-28e677f69906"
      },
      "source": [
        "from torch.utils.tensorboard import SummaryWriter\n",
        "\n",
        "summary_writer = SummaryWriter()\n",
        "\n",
        "N_EPOCHS = 5\n",
        "\n",
        "best_valid_loss = float('inf')\n",
        "\n",
        "for epoch in range(N_EPOCHS):\n",
        "\n",
        "    start_time = time.time()\n",
        "    \n",
        "    train_loss, train_acc, train_rec, train_prec, train_f1 = train(model, train_iterator, optimiser, criterion)\n",
        "    valid_loss, valid_acc, valid_rec, valid_prec, valid_f1 = evaluate(model, valid_iterator, criterion)\n",
        "\n",
        "    summary_writer.add_scalar(\"training/loss\", train_loss, epoch)\n",
        "    summary_writer.add_scalar(\"training/accuracy\", train_acc, epoch)\n",
        "    summary_writer.add_scalar(\"training/recall\", train_rec, epoch)\n",
        "    summary_writer.add_scalar(\"training/precision\", train_prec, epoch)\n",
        "    summary_writer.add_scalar(\"training/F1\", train_f1, epoch)\n",
        "\n",
        "    summary_writer.add_scalar(\"validation/loss\", valid_loss, epoch)\n",
        "    summary_writer.add_scalar(\"validation/accuracy\", valid_acc, epoch)\n",
        "    summary_writer.add_scalar(\"validation/recall\", valid_rec, epoch)\n",
        "    summary_writer.add_scalar(\"validation/precision\", valid_prec, epoch)\n",
        "    summary_writer.add_scalar(\"validation/F1\", valid_f1, epoch)\n",
        "    \n",
        "    \n",
        "    end_time = time.time()\n",
        "\n",
        "    epoch_mins, epoch_secs = epoch_time(start_time, end_time)\n",
        "    \n",
        "    if valid_loss < best_valid_loss:\n",
        "        best_valid_loss = valid_loss\n",
        "        torch.save(model.state_dict(), 'tut1-model.pt')\n",
        "    \n",
        "    print(f'Epoch: {epoch+1:02} | Epoch Time: {epoch_mins}m {epoch_secs}s')\n",
        "    print(f'\\tTrain Loss: {train_loss:.3f} | Val. Loss: {valid_loss:.3f}')\n",
        "    print(f'\\tTrain Acc : {train_acc*100:.2f}% | Val. Acc : {valid_acc*100:.2f}%')\n",
        "    print(f'\\tTrain Rec : {train_rec*100:.2f}% | Val. Rec : {valid_rec*100:.2f}%')\n",
        "    print(f'\\tTrain Prec: {train_prec*100:.2f}% | Val. Prec: {valid_prec*100:.2f}%')\n",
        "    print(f'\\tTrain F1  : {train_f1*100:.2f}% | Val. F1  : {valid_f1*100:.2f}%')\n",
        "\n",
        "# after completing all epochs, visualise the word vectors\n",
        "vectors = model.embedding.weight.data\n",
        "labels = [l for l in TEXT.vocab.itos]\n",
        "summary_writer.add_embedding(vectors, metadata=labels)\n",
        "summary_writer.close()"
      ],
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch: 01 | Epoch Time: 0m 11s\n",
            "\tTrain Loss: 0.832 | Val. Loss: 72.993\n",
            "\tTrain Acc : 0.60% | Val. Acc : 66.66%\n",
            "\tTrain Rec : 0.53% | Val. Rec : 59.45%\n",
            "\tTrain Prec: 0.57% | Val. Prec: 67.41%\n",
            "\tTrain F1  : 0.52% | Val. F1  : 60.35%\n",
            "Epoch: 02 | Epoch Time: 0m 11s\n",
            "\tTrain Loss: 0.712 | Val. Loss: 69.677\n",
            "\tTrain Acc : 0.68% | Val. Acc : 68.34%\n",
            "\tTrain Rec : 0.64% | Val. Rec : 65.03%\n",
            "\tTrain Prec: 0.67% | Val. Prec: 67.47%\n",
            "\tTrain F1  : 0.64% | Val. F1  : 65.05%\n",
            "Epoch: 03 | Epoch Time: 0m 11s\n",
            "\tTrain Loss: 0.647 | Val. Loss: 67.471\n",
            "\tTrain Acc : 0.71% | Val. Acc : 69.20%\n",
            "\tTrain Rec : 0.68% | Val. Rec : 67.03%\n",
            "\tTrain Prec: 0.71% | Val. Prec: 67.09%\n",
            "\tTrain F1  : 0.68% | Val. F1  : 66.38%\n",
            "Epoch: 04 | Epoch Time: 0m 11s\n",
            "\tTrain Loss: 0.583 | Val. Loss: 69.408\n",
            "\tTrain Acc : 0.75% | Val. Acc : 69.78%\n",
            "\tTrain Rec : 0.72% | Val. Rec : 64.55%\n",
            "\tTrain Prec: 0.74% | Val. Prec: 68.98%\n",
            "\tTrain F1  : 0.72% | Val. F1  : 65.26%\n",
            "Epoch: 05 | Epoch Time: 0m 11s\n",
            "\tTrain Loss: 0.529 | Val. Loss: 72.809\n",
            "\tTrain Acc : 0.78% | Val. Acc : 69.08%\n",
            "\tTrain Rec : 0.76% | Val. Rec : 66.76%\n",
            "\tTrain Prec: 0.77% | Val. Prec: 67.14%\n",
            "\tTrain F1  : 0.75% | Val. F1  : 66.09%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8FNIAAqh7dDE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# %tensorboard --logdir runs"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EdHaQTiSxsrH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "a4e64ee7-f822-4096-942b-262a0f68bd48"
      },
      "source": [
        "# model.load_state_dict(torch.load('tut1-model.pt'))\n",
        "\n",
        "test_loss, test_acc, test_rec, test_prec, test_f1 = evaluate(model, test_iterator, criterion)\n",
        "#DONY\n",
        "print(f'Test Loss: {test_loss:.3f}')\n",
        "print(f'Test Acc : {test_acc*100:.2f}%')\n",
        "print(f'Test Rec : {test_rec*100:.2f}%')\n",
        "print(f'Test Prec: {test_prec*100:.2f}%')\n",
        "print(f'Test F1  : {test_f1*100:.2f}%')"
      ],
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test Loss: 0.828\n",
            "Test Acc : 65.16%\n",
            "Test Rec : 64.89%\n",
            "Test Prec: 62.38%\n",
            "Test F1  : 62.55%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PpFVYFfLQiZn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# without validation\n",
        "# 0.6333333333333333 0.6296296296296297 0.625 0.6257864775791471\n",
        "\n",
        "# with validation\n",
        "# 0.65 0.6382716049382716 0.6422222222222222 0.6385204833480697"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_mIw6tbUUd1Q",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JZtUHroDTD6k",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lXZiPLefTGo5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}